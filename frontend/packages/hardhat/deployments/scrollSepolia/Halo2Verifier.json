{
  "address": "0xF3e5FdDf70E5Cb9350035887A57FC08A5bbA37B7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "instances",
          "type": "uint256[]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe9c3f29cc27c3834ef295b811401233e4639fd77ba687685a14c0bed241e6347",
  "receipt": {
    "to": null,
    "from": "0x02F9622Dd0ff82dE1c2B9556E2170cDF6463a111",
    "contractAddress": "0xF3e5FdDf70E5Cb9350035887A57FC08A5bbA37B7",
    "transactionIndex": 0,
    "gasUsed": "2670933",
    "logsBloom": "0x
    "blockHash": "0xced88503bf14ac4ecce516019f88b0680ff426da15e733473aa8cad561604a00",
    "transactionHash": "0xe9c3f29cc27c3834ef295b811401233e4639fd77ba687685a14c0bed241e6347",
    "logs": [],
    "blockNumber": 3010502,
    "cumulativeGasUsed": "2670933",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e31d10c9d47049122a8931bc8166e783",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"instances\",\"type\":\"uint256[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"Halo2Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract Halo2Verifier {\\n    uint256 internal constant    PROOF_LEN_CPTR = 0x44;\\n    uint256 internal constant        PROOF_CPTR = 0x64;\\n    uint256 internal constant NUM_INSTANCE_CPTR = 0x14c4;\\n    uint256 internal constant     INSTANCE_CPTR = 0x14e4;\\n\\n    uint256 internal constant FIRST_QUOTIENT_X_CPTR = 0x07e4;\\n    uint256 internal constant  LAST_QUOTIENT_X_CPTR = 0x08a4;\\n\\n    uint256 internal constant                VK_MPTR = 0x05a0;\\n    uint256 internal constant         VK_DIGEST_MPTR = 0x05a0;\\n    uint256 internal constant     NUM_INSTANCES_MPTR = 0x05c0;\\n    uint256 internal constant                 K_MPTR = 0x05e0;\\n    uint256 internal constant             N_INV_MPTR = 0x0600;\\n    uint256 internal constant             OMEGA_MPTR = 0x0620;\\n    uint256 internal constant         OMEGA_INV_MPTR = 0x0640;\\n    uint256 internal constant    OMEGA_INV_TO_L_MPTR = 0x0660;\\n    uint256 internal constant   HAS_ACCUMULATOR_MPTR = 0x0680;\\n    uint256 internal constant        ACC_OFFSET_MPTR = 0x06a0;\\n    uint256 internal constant     NUM_ACC_LIMBS_MPTR = 0x06c0;\\n    uint256 internal constant NUM_ACC_LIMB_BITS_MPTR = 0x06e0;\\n    uint256 internal constant              G1_X_MPTR = 0x0700;\\n    uint256 internal constant              G1_Y_MPTR = 0x0720;\\n    uint256 internal constant            G2_X_1_MPTR = 0x0740;\\n    uint256 internal constant            G2_X_2_MPTR = 0x0760;\\n    uint256 internal constant            G2_Y_1_MPTR = 0x0780;\\n    uint256 internal constant            G2_Y_2_MPTR = 0x07a0;\\n    uint256 internal constant      NEG_S_G2_X_1_MPTR = 0x07c0;\\n    uint256 internal constant      NEG_S_G2_X_2_MPTR = 0x07e0;\\n    uint256 internal constant      NEG_S_G2_Y_1_MPTR = 0x0800;\\n    uint256 internal constant      NEG_S_G2_Y_2_MPTR = 0x0820;\\n\\n    uint256 internal constant CHALLENGE_MPTR = 0x1380;\\n\\n    uint256 internal constant THETA_MPTR = 0x1380;\\n    uint256 internal constant  BETA_MPTR = 0x13a0;\\n    uint256 internal constant GAMMA_MPTR = 0x13c0;\\n    uint256 internal constant     Y_MPTR = 0x13e0;\\n    uint256 internal constant     X_MPTR = 0x1400;\\n    uint256 internal constant  ZETA_MPTR = 0x1420;\\n    uint256 internal constant    NU_MPTR = 0x1440;\\n    uint256 internal constant    MU_MPTR = 0x1460;\\n\\n    uint256 internal constant       ACC_LHS_X_MPTR = 0x1480;\\n    uint256 internal constant       ACC_LHS_Y_MPTR = 0x14a0;\\n    uint256 internal constant       ACC_RHS_X_MPTR = 0x14c0;\\n    uint256 internal constant       ACC_RHS_Y_MPTR = 0x14e0;\\n    uint256 internal constant             X_N_MPTR = 0x1500;\\n    uint256 internal constant X_N_MINUS_1_INV_MPTR = 0x1520;\\n    uint256 internal constant          L_LAST_MPTR = 0x1540;\\n    uint256 internal constant         L_BLIND_MPTR = 0x1560;\\n    uint256 internal constant             L_0_MPTR = 0x1580;\\n    uint256 internal constant   INSTANCE_EVAL_MPTR = 0x15a0;\\n    uint256 internal constant   QUOTIENT_EVAL_MPTR = 0x15c0;\\n    uint256 internal constant      QUOTIENT_X_MPTR = 0x15e0;\\n    uint256 internal constant      QUOTIENT_Y_MPTR = 0x1600;\\n    uint256 internal constant          R_EVAL_MPTR = 0x1620;\\n    uint256 internal constant   PAIRING_LHS_X_MPTR = 0x1640;\\n    uint256 internal constant   PAIRING_LHS_Y_MPTR = 0x1660;\\n    uint256 internal constant   PAIRING_RHS_X_MPTR = 0x1680;\\n    uint256 internal constant   PAIRING_RHS_Y_MPTR = 0x16a0;\\n\\n    function verifyProof(\\n        bytes calldata proof,\\n        uint256[] calldata instances\\n    ) public returns (bool) {\\n        assembly {\\n            // Read EC point (x, y) at (proof_cptr, proof_cptr + 0x20),\\n            // and check if the point is on affine plane,\\n            // and store them in (hash_mptr, hash_mptr + 0x20).\\n            // Return updated (success, proof_cptr, hash_mptr).\\n            function read_ec_point(success, proof_cptr, hash_mptr, q) -> ret0, ret1, ret2 {\\n                let x := calldataload(proof_cptr)\\n                let y := calldataload(add(proof_cptr, 0x20))\\n                ret0 := and(success, lt(x, q))\\n                ret0 := and(ret0, lt(y, q))\\n                ret0 := and(ret0, eq(mulmod(y, y, q), addmod(mulmod(x, mulmod(x, x, q), q), 3, q)))\\n                mstore(hash_mptr, x)\\n                mstore(add(hash_mptr, 0x20), y)\\n                ret1 := add(proof_cptr, 0x40)\\n                ret2 := add(hash_mptr, 0x40)\\n            }\\n\\n            // Squeeze challenge by keccak256(memory[0..hash_mptr]),\\n            // and store hash mod r as challenge in challenge_mptr,\\n            // and push back hash in 0x00 as the first input for next squeeze.\\n            // Return updated (challenge_mptr, hash_mptr).\\n            function squeeze_challenge(challenge_mptr, hash_mptr, r) -> ret0, ret1 {\\n                let hash := keccak256(0x00, hash_mptr)\\n                mstore(challenge_mptr, mod(hash, r))\\n                mstore(0x00, hash)\\n                ret0 := add(challenge_mptr, 0x20)\\n                ret1 := 0x20\\n            }\\n\\n            // Squeeze challenge without absorbing new input from calldata,\\n            // by putting an extra 0x01 in memory[0x20] and squeeze by keccak256(memory[0..21]),\\n            // and store hash mod r as challenge in challenge_mptr,\\n            // and push back hash in 0x00 as the first input for next squeeze.\\n            // Return updated (challenge_mptr).\\n            function squeeze_challenge_cont(challenge_mptr, r) -> ret {\\n                mstore8(0x20, 0x01)\\n                let hash := keccak256(0x00, 0x21)\\n                mstore(challenge_mptr, mod(hash, r))\\n                mstore(0x00, hash)\\n                ret := add(challenge_mptr, 0x20)\\n            }\\n\\n            // Batch invert values in memory[mptr_start..mptr_end] in place.\\n            // Return updated (success).\\n            function batch_invert(success, mptr_start, mptr_end, r) -> ret {\\n                let gp_mptr := mptr_end\\n                let gp := mload(mptr_start)\\n                let mptr := add(mptr_start, 0x20)\\n                for\\n                    {}\\n                    lt(mptr, sub(mptr_end, 0x20))\\n                    {}\\n                {\\n                    gp := mulmod(gp, mload(mptr), r)\\n                    mstore(gp_mptr, gp)\\n                    mptr := add(mptr, 0x20)\\n                    gp_mptr := add(gp_mptr, 0x20)\\n                }\\n                gp := mulmod(gp, mload(mptr), r)\\n\\n                mstore(gp_mptr, 0x20)\\n                mstore(add(gp_mptr, 0x20), 0x20)\\n                mstore(add(gp_mptr, 0x40), 0x20)\\n                mstore(add(gp_mptr, 0x60), gp)\\n                mstore(add(gp_mptr, 0x80), sub(r, 2))\\n                mstore(add(gp_mptr, 0xa0), r)\\n                ret := and(success, staticcall(gas(), 0x05, gp_mptr, 0xc0, gp_mptr, 0x20))\\n                let all_inv := mload(gp_mptr)\\n\\n                let first_mptr := mptr_start\\n                let second_mptr := add(first_mptr, 0x20)\\n                gp_mptr := sub(gp_mptr, 0x20)\\n                for\\n                    {}\\n                    lt(second_mptr, mptr)\\n                    {}\\n                {\\n                    let inv := mulmod(all_inv, mload(gp_mptr), r)\\n                    all_inv := mulmod(all_inv, mload(mptr), r)\\n                    mstore(mptr, inv)\\n                    mptr := sub(mptr, 0x20)\\n                    gp_mptr := sub(gp_mptr, 0x20)\\n                }\\n                let inv_first := mulmod(all_inv, mload(second_mptr), r)\\n                let inv_second := mulmod(all_inv, mload(first_mptr), r)\\n                mstore(first_mptr, inv_first)\\n                mstore(second_mptr, inv_second)\\n            }\\n\\n            // Add (x, y) into point at (0x00, 0x20).\\n            // Return updated (success).\\n            function ec_add_acc(success, x, y) -> ret {\\n                mstore(0x40, x)\\n                mstore(0x60, y)\\n                ret := and(success, staticcall(gas(), 0x06, 0x00, 0x80, 0x00, 0x40))\\n            }\\n\\n            // Scale point at (0x00, 0x20) by scalar.\\n            function ec_mul_acc(success, scalar) -> ret {\\n                mstore(0x40, scalar)\\n                ret := and(success, staticcall(gas(), 0x07, 0x00, 0x60, 0x00, 0x40))\\n            }\\n\\n            // Add (x, y) into point at (0x80, 0xa0).\\n            // Return updated (success).\\n            function ec_add_tmp(success, x, y) -> ret {\\n                mstore(0xc0, x)\\n                mstore(0xe0, y)\\n                ret := and(success, staticcall(gas(), 0x06, 0x80, 0x80, 0x80, 0x40))\\n            }\\n\\n            // Scale point at (0x80, 0xa0) by scalar.\\n            // Return updated (success).\\n            function ec_mul_tmp(success, scalar) -> ret {\\n                mstore(0xc0, scalar)\\n                ret := and(success, staticcall(gas(), 0x07, 0x80, 0x60, 0x80, 0x40))\\n            }\\n\\n            // Perform pairing check.\\n            // Return updated (success).\\n            function ec_pairing(success, lhs_x, lhs_y, rhs_x, rhs_y) -> ret {\\n                mstore(0x00, lhs_x)\\n                mstore(0x20, lhs_y)\\n                mstore(0x40, mload(G2_X_1_MPTR))\\n                mstore(0x60, mload(G2_X_2_MPTR))\\n                mstore(0x80, mload(G2_Y_1_MPTR))\\n                mstore(0xa0, mload(G2_Y_2_MPTR))\\n                mstore(0xc0, rhs_x)\\n                mstore(0xe0, rhs_y)\\n                mstore(0x100, mload(NEG_S_G2_X_1_MPTR))\\n                mstore(0x120, mload(NEG_S_G2_X_2_MPTR))\\n                mstore(0x140, mload(NEG_S_G2_Y_1_MPTR))\\n                mstore(0x160, mload(NEG_S_G2_Y_2_MPTR))\\n                ret := and(success, staticcall(gas(), 0x08, 0x00, 0x180, 0x00, 0x20))\\n                ret := and(ret, mload(0x00))\\n            }\\n\\n            // Modulus\\n            let q := 21888242871839275222246405745257275088696311157297823662689037894645226208583 // BN254 base field\\n            let r := 21888242871839275222246405745257275088548364400416034343698204186575808495617 // BN254 scalar field\\n\\n            // Initialize success as true\\n            let success := true\\n\\n            {\\n                // Load vk_digest and num_instances of vk into memory\\n                mstore(0x05a0, 0x015ed1eb11aeda63673c5cd1d21e7576d6d9b610127552013d058798ad9942a9) // vk_digest\\n                mstore(0x05c0, 0x0000000000000000000000000000000000000000000000000000000000000003) // num_instances\\n\\n                // Check valid length of proof\\n                success := and(success, eq(0x1460, calldataload(PROOF_LEN_CPTR)))\\n\\n                // Check valid length of instances\\n                let num_instances := mload(NUM_INSTANCES_MPTR)\\n                success := and(success, eq(num_instances, calldataload(NUM_INSTANCE_CPTR)))\\n\\n                // Absorb vk diegst\\n                mstore(0x00, mload(VK_DIGEST_MPTR))\\n\\n                // Read instances and witness commitments and generate challenges\\n                let hash_mptr := 0x20\\n                let instance_cptr := INSTANCE_CPTR\\n                for\\n                    { let instance_cptr_end := add(instance_cptr, mul(0x20, num_instances)) }\\n                    lt(instance_cptr, instance_cptr_end)\\n                    {}\\n                {\\n                    let instance := calldataload(instance_cptr)\\n                    success := and(success, lt(instance, r))\\n                    mstore(hash_mptr, instance)\\n                    instance_cptr := add(instance_cptr, 0x20)\\n                    hash_mptr := add(hash_mptr, 0x20)\\n                }\\n\\n                let proof_cptr := PROOF_CPTR\\n                let challenge_mptr := CHALLENGE_MPTR\\n\\n                // Phase 1\\n                for\\n                    { let proof_cptr_end := add(proof_cptr, 0x0180) }\\n                    lt(proof_cptr, proof_cptr_end)\\n                    {}\\n                {\\n                    success, proof_cptr, hash_mptr := read_ec_point(success, proof_cptr, hash_mptr, q)\\n                }\\n\\n                challenge_mptr, hash_mptr := squeeze_challenge(challenge_mptr, hash_mptr, r)\\n\\n                // Phase 2\\n                for\\n                    { let proof_cptr_end := add(proof_cptr, 0x0280) }\\n                    lt(proof_cptr, proof_cptr_end)\\n                    {}\\n                {\\n                    success, proof_cptr, hash_mptr := read_ec_point(success, proof_cptr, hash_mptr, q)\\n                }\\n\\n                challenge_mptr, hash_mptr := squeeze_challenge(challenge_mptr, hash_mptr, r)\\n                challenge_mptr := squeeze_challenge_cont(challenge_mptr, r)\\n\\n                // Phase 3\\n                for\\n                    { let proof_cptr_end := add(proof_cptr, 0x0380) }\\n                    lt(proof_cptr, proof_cptr_end)\\n                    {}\\n                {\\n                    success, proof_cptr, hash_mptr := read_ec_point(success, proof_cptr, hash_mptr, q)\\n                }\\n\\n                challenge_mptr, hash_mptr := squeeze_challenge(challenge_mptr, hash_mptr, r)\\n\\n                // Phase 4\\n                for\\n                    { let proof_cptr_end := add(proof_cptr, 0x0100) }\\n                    lt(proof_cptr, proof_cptr_end)\\n                    {}\\n                {\\n                    success, proof_cptr, hash_mptr := read_ec_point(success, proof_cptr, hash_mptr, q)\\n                }\\n\\n                challenge_mptr, hash_mptr := squeeze_challenge(challenge_mptr, hash_mptr, r)\\n\\n                // Read evaluations\\n                for\\n                    { let proof_cptr_end := add(proof_cptr, 0x0b60) }\\n                    lt(proof_cptr, proof_cptr_end)\\n                    {}\\n                {\\n                    let eval := calldataload(proof_cptr)\\n                    success := and(success, lt(eval, r))\\n                    mstore(hash_mptr, eval)\\n                    proof_cptr := add(proof_cptr, 0x20)\\n                    hash_mptr := add(hash_mptr, 0x20)\\n                }\\n\\n                // Read batch opening proof and generate challenges\\n                challenge_mptr, hash_mptr := squeeze_challenge(challenge_mptr, hash_mptr, r)       // zeta\\n                challenge_mptr := squeeze_challenge_cont(challenge_mptr, r)                        // nu\\n\\n                success, proof_cptr, hash_mptr := read_ec_point(success, proof_cptr, hash_mptr, q) // W\\n\\n                challenge_mptr, hash_mptr := squeeze_challenge(challenge_mptr, hash_mptr, r)       // mu\\n\\n                success, proof_cptr, hash_mptr := read_ec_point(success, proof_cptr, hash_mptr, q) // W'\\n\\n                // Load full vk into memory\\n                mstore(0x05a0, 0x015ed1eb11aeda63673c5cd1d21e7576d6d9b610127552013d058798ad9942a9) // vk_digest\\n                mstore(0x05c0, 0x0000000000000000000000000000000000000000000000000000000000000003) // num_instances\\n                mstore(0x05e0, 0x0000000000000000000000000000000000000000000000000000000000000013) // k\\n                mstore(0x0600, 0x3064486657634403844b0eac78ca882cfd284341fcb0615a15cfcd17b14d8201) // n_inv\\n                mstore(0x0620, 0x0cf1526aaafac6bacbb67d11a4077806b123f767e4b0883d14cc0193568fc082) // omega\\n                mstore(0x0640, 0x20784546081c2aba227a9c15990bf6983ba2a2758faf563f38b437203ee230a9) // omega_inv\\n                mstore(0x0660, 0x230385eb1034f58ed905d7dafbbf62da84661de658f682a719d8836889e04857) // omega_inv_to_l\\n                mstore(0x0680, 0x0000000000000000000000000000000000000000000000000000000000000000) // has_accumulator\\n                mstore(0x06a0, 0x0000000000000000000000000000000000000000000000000000000000000000) // acc_offset\\n                mstore(0x06c0, 0x0000000000000000000000000000000000000000000000000000000000000000) // num_acc_limbs\\n                mstore(0x06e0, 0x0000000000000000000000000000000000000000000000000000000000000000) // num_acc_limb_bits\\n                mstore(0x0700, 0x0000000000000000000000000000000000000000000000000000000000000001) // g1_x\\n                mstore(0x0720, 0x0000000000000000000000000000000000000000000000000000000000000002) // g1_y\\n                mstore(0x0740, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2) // g2_x_1\\n                mstore(0x0760, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed) // g2_x_2\\n                mstore(0x0780, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b) // g2_y_1\\n                mstore(0x07a0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa) // g2_y_2\\n                mstore(0x07c0, 0x186282957db913abd99f91db59fe69922e95040603ef44c0bd7aa3adeef8f5ac) // neg_s_g2_x_1\\n                mstore(0x07e0, 0x17944351223333f260ddc3b4af45191b856689eda9eab5cbcddbbe570ce860d2) // neg_s_g2_x_2\\n                mstore(0x0800, 0x06d971ff4a7467c3ec596ed6efc674572e32fd6f52b721f97e35b0b3d3546753) // neg_s_g2_y_1\\n                mstore(0x0820, 0x06ecdb9f9567f59ed2eee36e1e1d58797fd13cc97fafc2910f5e8a12f202fa9a) // neg_s_g2_y_2\\n                mstore(0x0840, 0x0216e1962b118a871641191e5b56ef67b7234be0ba1f6e65cc3149f4cdf7d2a4) // fixed_comms[0].x\\n                mstore(0x0860, 0x14dcba857f39b53d46db4acec4e59ee5a328d35713fd031114b75025d1ecb3cb) // fixed_comms[0].y\\n                mstore(0x0880, 0x187c9b94532ab54b1021c5f2a0961ed8cc7e6c1d6fba329813fdc75e12010253) // fixed_comms[1].x\\n                mstore(0x08a0, 0x0b9e3099fb5fda92a6c4800600cdce14b40592756a6efc7ff6b7c4b016a2b584) // fixed_comms[1].y\\n                mstore(0x08c0, 0x012490bac7f67b847cf6946033db4a632d4b8c0661c116fe4fc8bc2c5377e310) // fixed_comms[2].x\\n                mstore(0x08e0, 0x0ce78f7694626a9f6ff31e7aae992e8ec8a9bd5fc1f25b18e3d5cf491e32022e) // fixed_comms[2].y\\n                mstore(0x0900, 0x0b0b730c7cc036b250580368804e6ed2056381162d89e0043b5bd98f4ee75f3a) // fixed_comms[3].x\\n                mstore(0x0920, 0x0ac8139daf06f5eea557c933528300d6f404d8695a11179c01e1faf1b8b3fc8e) // fixed_comms[3].y\\n                mstore(0x0940, 0x18bb78b97ae3439de5eb18cc8ff88b94632fd4d4a197ab1d6fbcf7cd4e208e71) // fixed_comms[4].x\\n                mstore(0x0960, 0x0f01ef2f892e9bed184b22e73245e666380819b1f89cdfe8d2a2725099bcc499) // fixed_comms[4].y\\n                mstore(0x0980, 0x07441a798ac3fd5588b3782c716810b647a50765a678f59494231a3317ef8b43) // fixed_comms[5].x\\n                mstore(0x09a0, 0x2f8a11be120a83d9907b9090b91a2770d3507502a11b6f928cb1720227e07cb0) // fixed_comms[5].y\\n                mstore(0x09c0, 0x1082dd80327937416906c49ce703e84270f642e316ea7d79764b5d0ca0c17668) // fixed_comms[6].x\\n                mstore(0x09e0, 0x03882a90aef5c45d429a2a7c228f67e1ef92b4053ab40ed9ccca6fba107f5a49) // fixed_comms[6].y\\n                mstore(0x0a00, 0x0762a792c4e078b1a1601f19012b5aa2a802c88ad53ffcd0ddffc52a18441859) // fixed_comms[7].x\\n                mstore(0x0a20, 0x1b8aac3ff017c6c2688fbef6532e0ada2f70d21cb8b20cf918ad75fa40c39059) // fixed_comms[7].y\\n                mstore(0x0a40, 0x1083e2b5a2692c9dfc6bfc36b2c062ce3e9639291634299c2454f6870edc74d4) // fixed_comms[8].x\\n                mstore(0x0a60, 0x113f793e266061a8372644df1b58d827cc8a67a3e5ebbacca8188d0308b3794a) // fixed_comms[8].y\\n                mstore(0x0a80, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[9].x\\n                mstore(0x0aa0, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[9].y\\n                mstore(0x0ac0, 0x2c3426f6ae01c251eb7b3ad51ac755b2248f56fa8d3eaf6a73e48b658e164514) // fixed_comms[10].x\\n                mstore(0x0ae0, 0x220ec25c20e22e59748822f57735d7dc10cc7bb9ff523a408d7be829a81df34a) // fixed_comms[10].y\\n                mstore(0x0b00, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[11].x\\n                mstore(0x0b20, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[11].y\\n                mstore(0x0b40, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[12].x\\n                mstore(0x0b60, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[12].y\\n                mstore(0x0b80, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[13].x\\n                mstore(0x0ba0, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[13].y\\n                mstore(0x0bc0, 0x0282ccf814185972925dc138ef87c90725017e68e61835dbf7e357bd019e111a) // fixed_comms[14].x\\n                mstore(0x0be0, 0x12340e976d5284a05acd024637ee9b975e1ffd4fd2687737212667d9ef059090) // fixed_comms[14].y\\n                mstore(0x0c00, 0x0b43a13d09f0eb73dc967846a8013d832fcb609a5fb5bfaaa59476e13003d45b) // fixed_comms[15].x\\n                mstore(0x0c20, 0x2cebd1042aae886ebdb5a1abbb8d07301d9c903d2c46ab07a4780b735dc9a822) // fixed_comms[15].y\\n                mstore(0x0c40, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[16].x\\n                mstore(0x0c60, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[16].y\\n                mstore(0x0c80, 0x1374c4c06b1219a9760699a85492f97a0f17ed49ddcfce2248adc9df8cb0926a) // fixed_comms[17].x\\n                mstore(0x0ca0, 0x2fce9e1ba999b7449ed4933ed8e2ad23d89e8e9cdde42b6e038e19d02dce3374) // fixed_comms[17].y\\n                mstore(0x0cc0, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[18].x\\n                mstore(0x0ce0, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[18].y\\n                mstore(0x0d00, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[19].x\\n                mstore(0x0d20, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[19].y\\n                mstore(0x0d40, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[20].x\\n                mstore(0x0d60, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[20].y\\n                mstore(0x0d80, 0x0b5344c0f186b30f1a74579b8a4e31609a59f38cdacaedc651d3c71473d052b6) // fixed_comms[21].x\\n                mstore(0x0da0, 0x0b6d56d0bb6b2b32ea2dab46a3dadd9f8d8a0234edcbf7ac3cd2d532367792af) // fixed_comms[21].y\\n                mstore(0x0dc0, 0x0c0f1a2980e4e061ec39b173145e45ff63dac660b1f5cf6ed7980bd61d03d83c) // fixed_comms[22].x\\n                mstore(0x0de0, 0x2546f6b73d270a25fdac502ff2b4c7d41a6024c5ffe335f3364f4b6f16e6976d) // fixed_comms[22].y\\n                mstore(0x0e00, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[23].x\\n                mstore(0x0e20, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[23].y\\n                mstore(0x0e40, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[24].x\\n                mstore(0x0e60, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[24].y\\n                mstore(0x0e80, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[25].x\\n                mstore(0x0ea0, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[25].y\\n                mstore(0x0ec0, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[26].x\\n                mstore(0x0ee0, 0x0000000000000000000000000000000000000000000000000000000000000000) // fixed_comms[26].y\\n                mstore(0x0f00, 0x049df352acb3a45a7fe15558a157038d557365ff21a562a4d29b99e237818fdb) // fixed_comms[27].x\\n                mstore(0x0f20, 0x1e6ea4545cac489d51144bf36c369196454c8b5d5c483b90017ea64fcfe4963b) // fixed_comms[27].y\\n                mstore(0x0f40, 0x051699300252f4edbb6b52c8061d009f5b885dc0903500bbcfa7827a202a9d1f) // fixed_comms[28].x\\n                mstore(0x0f60, 0x18defa4a959b19b73fbcac2bbd4e9356c94314b19d58ea7c53bed9c25b195d9c) // fixed_comms[28].y\\n                mstore(0x0f80, 0x1a3f2401b386d536dc0a1ff30045d501b609cb23602eedfceef2d4264d602420) // fixed_comms[29].x\\n                mstore(0x0fa0, 0x1ca4d5bc2f08eb628b63bae40ea0b40e82102dfc7bad0a4b0aa92d783d22ead2) // fixed_comms[29].y\\n                mstore(0x0fc0, 0x1a3f2401b386d536dc0a1ff30045d501b609cb23602eedfceef2d4264d602420) // fixed_comms[30].x\\n                mstore(0x0fe0, 0x1ca4d5bc2f08eb628b63bae40ea0b40e82102dfc7bad0a4b0aa92d783d22ead2) // fixed_comms[30].y\\n                mstore(0x1000, 0x2be8e51f2c72ca2832826b7452c64cf95f1be50f91e93086e0fcf75bf15fad62) // fixed_comms[31].x\\n                mstore(0x1020, 0x16cb505ae9236137ce904d411d583fce2aecc38e72b10398ef4af76cd7dde018) // fixed_comms[31].y\\n                mstore(0x1040, 0x2be8e51f2c72ca2832826b7452c64cf95f1be50f91e93086e0fcf75bf15fad62) // fixed_comms[32].x\\n                mstore(0x1060, 0x16cb505ae9236137ce904d411d583fce2aecc38e72b10398ef4af76cd7dde018) // fixed_comms[32].y\\n                mstore(0x1080, 0x09b8d32874c3fff46fc88d2e9b56513136b556285d9a116cf88ad95081afa015) // fixed_comms[33].x\\n                mstore(0x10a0, 0x2ab67ed9a452a52afe519a10499f82cd0980f8fa7cd85dafe76d318bd3163beb) // fixed_comms[33].y\\n                mstore(0x10c0, 0x09b8d32874c3fff46fc88d2e9b56513136b556285d9a116cf88ad95081afa015) // fixed_comms[34].x\\n                mstore(0x10e0, 0x2ab67ed9a452a52afe519a10499f82cd0980f8fa7cd85dafe76d318bd3163beb) // fixed_comms[34].y\\n                mstore(0x1100, 0x2f0e4409049908c1091a4d3c59a0c816742a61b2c770d1a8caefbf68a4c68e73) // fixed_comms[35].x\\n                mstore(0x1120, 0x0fa4d0dfe99adba964723b4542bb0c4447a255f82d59f7d96168eaa341e0f149) // fixed_comms[35].y\\n                mstore(0x1140, 0x0e7fa261d2f88ea8d8e2666412fa3d3d1faa845793ddb40862e57d1c57fd0aca) // fixed_comms[36].x\\n                mstore(0x1160, 0x22c47c0930845a759ae2cf0397ae00991e40cf516144e0746fb4a5bd48de60d1) // fixed_comms[36].y\\n                mstore(0x1180, 0x044c90ab86815dccc1e3a903952d216cb666880388aeb065b0a530a840ef6fcd) // permutation_comms[0].x\\n                mstore(0x11a0, 0x20423a700b0e986380db464d0f9d07a6cd027421064ba401075195b75acb56b7) // permutation_comms[0].y\\n                mstore(0x11c0, 0x296920245ccf20b76d4e25dcae40905b9f1e66c24813b7d0a95f7961fc51b955) // permutation_comms[1].x\\n                mstore(0x11e0, 0x187c8c0640f7561170b45f89c46e5a6397e97d870323f38b4a4634135beaa325) // permutation_comms[1].y\\n                mstore(0x1200, 0x0c61dc15fb70d5a92088f46af977ae587649fa3ecfc442ebcaccf39c9ac728d5) // permutation_comms[2].x\\n                mstore(0x1220, 0x1a03d4641078a2d9d6f7d49430a2e37ea0796dd77fa625339ce2e85d1591de9b) // permutation_comms[2].y\\n                mstore(0x1240, 0x1e6f62336341d1b5b4b957d94793d6b4a7576925fc3a5282a485a4d3bc4fbcb3) // permutation_comms[3].x\\n                mstore(0x1260, 0x091251bea1003098fde04622b373d87834f1d06f8124a1b81ade3cf94a558cb5) // permutation_comms[3].y\\n                mstore(0x1280, 0x19246d84c2260d828f72e1fe7c289dfbe730959849f949d137e5ca40a3b76775) // permutation_comms[4].x\\n                mstore(0x12a0, 0x0136424cd2d9e208f63588e0f0e89b3818bbadb6496724321a1965df43c47b28) // permutation_comms[4].y\\n                mstore(0x12c0, 0x304ea1ae8077064dd78a50e5a6e79081418ba22e75cc4d5dcd075e410375c45f) // permutation_comms[5].x\\n                mstore(0x12e0, 0x14928efe1a73b5d3dc478d2dcf9d51ec52a8b9e52b040846a1d7fd4ec9cedf1e) // permutation_comms[5].y\\n                mstore(0x1300, 0x197d80284883061a16dfc9d037cc7e36f55ececbc520f89bc2f79970a81807fb) // permutation_comms[6].x\\n                mstore(0x1320, 0x0e2d5a3c74fcbf61e931c1c74e9b9f9ca916ced24ee34b65e7aac950933cd589) // permutation_comms[6].y\\n                mstore(0x1340, 0x1bb547de66663d2dc23e8269651c33fff970b1ee0ea36ec63824dce7b67f3ef9) // permutation_comms[7].x\\n                mstore(0x1360, 0x1b83c4ec52644683c8dc1810f8a3d83fb6b778226e127474b483349464462455) // permutation_comms[7].y\\n\\n                // Read accumulator from instances\\n                if mload(HAS_ACCUMULATOR_MPTR) {\\n                    let num_limbs := mload(NUM_ACC_LIMBS_MPTR)\\n                    let num_limb_bits := mload(NUM_ACC_LIMB_BITS_MPTR)\\n\\n                    let cptr := add(INSTANCE_CPTR, mul(mload(ACC_OFFSET_MPTR), 0x20))\\n                    let lhs_y_off := mul(num_limbs, 0x20)\\n                    let rhs_x_off := mul(lhs_y_off, 2)\\n                    let rhs_y_off := mul(lhs_y_off, 3)\\n                    let lhs_x := calldataload(cptr)\\n                    let lhs_y := calldataload(add(cptr, lhs_y_off))\\n                    let rhs_x := calldataload(add(cptr, rhs_x_off))\\n                    let rhs_y := calldataload(add(cptr, rhs_y_off))\\n                    for\\n                        {\\n                            let cptr_end := add(cptr, mul(0x20, num_limbs))\\n                            let shift := num_limb_bits\\n                        }\\n                        lt(cptr, cptr_end)\\n                        {}\\n                    {\\n                        cptr := add(cptr, 0x20)\\n                        lhs_x := add(lhs_x, shl(shift, calldataload(cptr)))\\n                        lhs_y := add(lhs_y, shl(shift, calldataload(add(cptr, lhs_y_off))))\\n                        rhs_x := add(rhs_x, shl(shift, calldataload(add(cptr, rhs_x_off))))\\n                        rhs_y := add(rhs_y, shl(shift, calldataload(add(cptr, rhs_y_off))))\\n                        shift := add(shift, num_limb_bits)\\n                    }\\n\\n                    success := and(success, eq(mulmod(lhs_y, lhs_y, q), addmod(mulmod(lhs_x, mulmod(lhs_x, lhs_x, q), q), 3, q)))\\n                    success := and(success, eq(mulmod(rhs_y, rhs_y, q), addmod(mulmod(rhs_x, mulmod(rhs_x, rhs_x, q), q), 3, q)))\\n\\n                    mstore(ACC_LHS_X_MPTR, lhs_x)\\n                    mstore(ACC_LHS_Y_MPTR, lhs_y)\\n                    mstore(ACC_RHS_X_MPTR, rhs_x)\\n                    mstore(ACC_RHS_Y_MPTR, rhs_y)\\n                }\\n\\n                pop(q)\\n            }\\n\\n            // Revert earlier if anything from calldata is invalid\\n            if iszero(success) {\\n                revert(0, 0)\\n            }\\n\\n            // Compute lagrange evaluations and instance evaluation\\n            {\\n                let k := mload(K_MPTR)\\n                let x := mload(X_MPTR)\\n                let x_n := x\\n                for\\n                    { let idx := 0 }\\n                    lt(idx, k)\\n                    { idx := add(idx, 1) }\\n                {\\n                    x_n := mulmod(x_n, x_n, r)\\n                }\\n\\n                let omega := mload(OMEGA_MPTR)\\n\\n                let mptr := X_N_MPTR\\n                let mptr_end := add(mptr, mul(0x20, add(mload(NUM_INSTANCES_MPTR), 6)))\\n                if iszero(mload(NUM_INSTANCES_MPTR)) {\\n                    mptr_end := add(mptr_end, 0x20)\\n                }\\n                for\\n                    { let pow_of_omega := mload(OMEGA_INV_TO_L_MPTR) }\\n                    lt(mptr, mptr_end)\\n                    { mptr := add(mptr, 0x20) }\\n                {\\n                    mstore(mptr, addmod(x, sub(r, pow_of_omega), r))\\n                    pow_of_omega := mulmod(pow_of_omega, omega, r)\\n                }\\n                let x_n_minus_1 := addmod(x_n, sub(r, 1), r)\\n                mstore(mptr_end, x_n_minus_1)\\n                success := batch_invert(success, X_N_MPTR, add(mptr_end, 0x20), r)\\n\\n                mptr := X_N_MPTR\\n                let l_i_common := mulmod(x_n_minus_1, mload(N_INV_MPTR), r)\\n                for\\n                    { let pow_of_omega := mload(OMEGA_INV_TO_L_MPTR) }\\n                    lt(mptr, mptr_end)\\n                    { mptr := add(mptr, 0x20) }\\n                {\\n                    mstore(mptr, mulmod(l_i_common, mulmod(mload(mptr), pow_of_omega, r), r))\\n                    pow_of_omega := mulmod(pow_of_omega, omega, r)\\n                }\\n\\n                let l_blind := mload(add(X_N_MPTR, 0x20))\\n                let l_i_cptr := add(X_N_MPTR, 0x40)\\n                for\\n                    { let l_i_cptr_end := add(X_N_MPTR, 0xc0) }\\n                    lt(l_i_cptr, l_i_cptr_end)\\n                    { l_i_cptr := add(l_i_cptr, 0x20) }\\n                {\\n                    l_blind := addmod(l_blind, mload(l_i_cptr), r)\\n                }\\n\\n                let instance_eval := 0\\n                for\\n                    {\\n                        let instance_cptr := INSTANCE_CPTR\\n                        let instance_cptr_end := add(instance_cptr, mul(0x20, mload(NUM_INSTANCES_MPTR)))\\n                    }\\n                    lt(instance_cptr, instance_cptr_end)\\n                    {\\n                        instance_cptr := add(instance_cptr, 0x20)\\n                        l_i_cptr := add(l_i_cptr, 0x20)\\n                    }\\n                {\\n                    instance_eval := addmod(instance_eval, mulmod(mload(l_i_cptr), calldataload(instance_cptr), r), r)\\n                }\\n\\n                let x_n_minus_1_inv := mload(mptr_end)\\n                let l_last := mload(X_N_MPTR)\\n                let l_0 := mload(add(X_N_MPTR, 0xc0))\\n\\n                mstore(X_N_MPTR, x_n)\\n                mstore(X_N_MINUS_1_INV_MPTR, x_n_minus_1_inv)\\n                mstore(L_LAST_MPTR, l_last)\\n                mstore(L_BLIND_MPTR, l_blind)\\n                mstore(L_0_MPTR, l_0)\\n                mstore(INSTANCE_EVAL_MPTR, instance_eval)\\n            }\\n\\n            // Compute quotient evavluation\\n            {\\n                let quotient_eval_numer\\n                let delta := 4131629893567559867359510883348571134090853742863529169391034518566172092834\\n                let y := mload(Y_MPTR)\\n                {\\n                    let f_12 := calldataload(0x0b44)\\n                    let a_4 := calldataload(0x0964)\\n                    let a_2 := calldataload(0x0924)\\n                    let var0 := sub(r, a_2)\\n                    let var1 := addmod(a_4, var0, r)\\n                    let var2 := mulmod(f_12, var1, r)\\n                    quotient_eval_numer := var2\\n                }\\n                {\\n                    let f_19 := calldataload(0x0c24)\\n                    let a_5 := calldataload(0x0984)\\n                    let a_3 := calldataload(0x0944)\\n                    let var0 := sub(r, a_3)\\n                    let var1 := addmod(a_5, var0, r)\\n                    let var2 := mulmod(f_19, var1, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var2, r)\\n                }\\n                {\\n                    let f_7 := calldataload(0x0aa4)\\n                    let a_4 := calldataload(0x0964)\\n                    let a_0 := calldataload(0x08e4)\\n                    let a_2 := calldataload(0x0924)\\n                    let var0 := addmod(a_0, a_2, r)\\n                    let var1 := sub(r, var0)\\n                    let var2 := addmod(a_4, var1, r)\\n                    let var3 := mulmod(f_7, var2, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var3, r)\\n                }\\n                {\\n                    let f_14 := calldataload(0x0b84)\\n                    let a_5 := calldataload(0x0984)\\n                    let a_1 := calldataload(0x0904)\\n                    let a_3 := calldataload(0x0944)\\n                    let var0 := addmod(a_1, a_3, r)\\n                    let var1 := sub(r, var0)\\n                    let var2 := addmod(a_5, var1, r)\\n                    let var3 := mulmod(f_14, var2, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var3, r)\\n                }\\n                {\\n                    let f_10 := calldataload(0x0b04)\\n                    let a_4 := calldataload(0x0964)\\n                    let a_0 := calldataload(0x08e4)\\n                    let a_2 := calldataload(0x0924)\\n                    let var0 := mulmod(a_0, a_2, r)\\n                    let var1 := sub(r, var0)\\n                    let var2 := addmod(a_4, var1, r)\\n                    let var3 := mulmod(f_10, var2, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var3, r)\\n                }\\n                {\\n                    let f_17 := calldataload(0x0be4)\\n                    let a_5 := calldataload(0x0984)\\n                    let a_1 := calldataload(0x0904)\\n                    let a_3 := calldataload(0x0944)\\n                    let var0 := mulmod(a_1, a_3, r)\\n                    let var1 := sub(r, var0)\\n                    let var2 := addmod(a_5, var1, r)\\n                    let var3 := mulmod(f_17, var2, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var3, r)\\n                }\\n                {\\n                    let f_8 := calldataload(0x0ac4)\\n                    let a_4 := calldataload(0x0964)\\n                    let a_0 := calldataload(0x08e4)\\n                    let a_2 := calldataload(0x0924)\\n                    let var0 := sub(r, a_2)\\n                    let var1 := addmod(a_0, var0, r)\\n                    let var2 := sub(r, var1)\\n                    let var3 := addmod(a_4, var2, r)\\n                    let var4 := mulmod(f_8, var3, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var4, r)\\n                }\\n                {\\n                    let f_15 := calldataload(0x0ba4)\\n                    let a_5 := calldataload(0x0984)\\n                    let a_1 := calldataload(0x0904)\\n                    let a_3 := calldataload(0x0944)\\n                    let var0 := sub(r, a_3)\\n                    let var1 := addmod(a_1, var0, r)\\n                    let var2 := sub(r, var1)\\n                    let var3 := addmod(a_5, var2, r)\\n                    let var4 := mulmod(f_15, var3, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var4, r)\\n                }\\n                {\\n                    let f_9 := calldataload(0x0ae4)\\n                    let a_4 := calldataload(0x0964)\\n                    let a_2 := calldataload(0x0924)\\n                    let var0 := sub(r, a_2)\\n                    let var1 := sub(r, var0)\\n                    let var2 := addmod(a_4, var1, r)\\n                    let var3 := mulmod(f_9, var2, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var3, r)\\n                }\\n                {\\n                    let f_16 := calldataload(0x0bc4)\\n                    let a_5 := calldataload(0x0984)\\n                    let a_3 := calldataload(0x0944)\\n                    let var0 := sub(r, a_3)\\n                    let var1 := sub(r, var0)\\n                    let var2 := addmod(a_5, var1, r)\\n                    let var3 := mulmod(f_16, var2, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var3, r)\\n                }\\n                {\\n                    let f_11 := calldataload(0x0b24)\\n                    let a_4 := calldataload(0x0964)\\n                    let var0 := mulmod(f_11, a_4, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var0, r)\\n                }\\n                {\\n                    let f_18 := calldataload(0x0c04)\\n                    let a_5 := calldataload(0x0984)\\n                    let var0 := mulmod(f_18, a_5, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var0, r)\\n                }\\n                {\\n                    let f_13 := calldataload(0x0b64)\\n                    let a_4 := calldataload(0x0964)\\n                    let var0 := 0x1\\n                    let var1 := sub(r, var0)\\n                    let var2 := addmod(a_4, var1, r)\\n                    let var3 := mulmod(a_4, var2, r)\\n                    let var4 := mulmod(f_13, var3, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var4, r)\\n                }\\n                {\\n                    let f_20 := calldataload(0x0c44)\\n                    let a_5 := calldataload(0x0984)\\n                    let var0 := 0x1\\n                    let var1 := sub(r, var0)\\n                    let var2 := addmod(a_5, var1, r)\\n                    let var3 := mulmod(a_5, var2, r)\\n                    let var4 := mulmod(f_20, var3, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var4, r)\\n                }\\n                {\\n                    let f_22 := calldataload(0x0c84)\\n                    let a_4 := calldataload(0x0964)\\n                    let a_4_prev_1 := calldataload(0x09a4)\\n                    let var0 := 0x0\\n                    let a_0 := calldataload(0x08e4)\\n                    let a_2 := calldataload(0x0924)\\n                    let var1 := mulmod(a_0, a_2, r)\\n                    let var2 := addmod(var0, var1, r)\\n                    let a_1 := calldataload(0x0904)\\n                    let a_3 := calldataload(0x0944)\\n                    let var3 := mulmod(a_1, a_3, r)\\n                    let var4 := addmod(var2, var3, r)\\n                    let var5 := addmod(a_4_prev_1, var4, r)\\n                    let var6 := sub(r, var5)\\n                    let var7 := addmod(a_4, var6, r)\\n                    let var8 := mulmod(f_22, var7, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var8, r)\\n                }\\n                {\\n                    let f_21 := calldataload(0x0c64)\\n                    let a_4 := calldataload(0x0964)\\n                    let var0 := 0x0\\n                    let a_0 := calldataload(0x08e4)\\n                    let a_2 := calldataload(0x0924)\\n                    let var1 := mulmod(a_0, a_2, r)\\n                    let var2 := addmod(var0, var1, r)\\n                    let a_1 := calldataload(0x0904)\\n                    let a_3 := calldataload(0x0944)\\n                    let var3 := mulmod(a_1, a_3, r)\\n                    let var4 := addmod(var2, var3, r)\\n                    let var5 := sub(r, var4)\\n                    let var6 := addmod(a_4, var5, r)\\n                    let var7 := mulmod(f_21, var6, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var7, r)\\n                }\\n                {\\n                    let f_24 := calldataload(0x0cc4)\\n                    let a_4 := calldataload(0x0964)\\n                    let var0 := 0x1\\n                    let a_2 := calldataload(0x0924)\\n                    let var1 := mulmod(var0, a_2, r)\\n                    let a_3 := calldataload(0x0944)\\n                    let var2 := mulmod(var1, a_3, r)\\n                    let var3 := sub(r, var2)\\n                    let var4 := addmod(a_4, var3, r)\\n                    let var5 := mulmod(f_24, var4, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var5, r)\\n                }\\n                {\\n                    let f_23 := calldataload(0x0ca4)\\n                    let a_4 := calldataload(0x0964)\\n                    let a_4_prev_1 := calldataload(0x09a4)\\n                    let var0 := 0x1\\n                    let a_2 := calldataload(0x0924)\\n                    let var1 := mulmod(var0, a_2, r)\\n                    let a_3 := calldataload(0x0944)\\n                    let var2 := mulmod(var1, a_3, r)\\n                    let var3 := mulmod(a_4_prev_1, var2, r)\\n                    let var4 := sub(r, var3)\\n                    let var5 := addmod(a_4, var4, r)\\n                    let var6 := mulmod(f_23, var5, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var6, r)\\n                }\\n                {\\n                    let f_26 := calldataload(0x0d04)\\n                    let a_4 := calldataload(0x0964)\\n                    let var0 := 0x0\\n                    let a_2 := calldataload(0x0924)\\n                    let var1 := addmod(var0, a_2, r)\\n                    let a_3 := calldataload(0x0944)\\n                    let var2 := addmod(var1, a_3, r)\\n                    let var3 := sub(r, var2)\\n                    let var4 := addmod(a_4, var3, r)\\n                    let var5 := mulmod(f_26, var4, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var5, r)\\n                }\\n                {\\n                    let f_25 := calldataload(0x0ce4)\\n                    let a_4 := calldataload(0x0964)\\n                    let a_4_prev_1 := calldataload(0x09a4)\\n                    let var0 := 0x0\\n                    let a_2 := calldataload(0x0924)\\n                    let var1 := addmod(var0, a_2, r)\\n                    let a_3 := calldataload(0x0944)\\n                    let var2 := addmod(var1, a_3, r)\\n                    let var3 := addmod(a_4_prev_1, var2, r)\\n                    let var4 := sub(r, var3)\\n                    let var5 := addmod(a_4, var4, r)\\n                    let var6 := mulmod(f_25, var5, r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), var6, r)\\n                }\\n                {\\n                    let l_0 := mload(L_0_MPTR)\\n                    let eval := addmod(l_0, sub(r, mulmod(l_0, calldataload(0x0f84), r)), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let perm_z_last := calldataload(0x1044)\\n                    let eval := mulmod(mload(L_LAST_MPTR), addmod(mulmod(perm_z_last, perm_z_last, r), sub(r, perm_z_last), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let eval := mulmod(mload(L_0_MPTR), addmod(calldataload(0x0fe4), sub(r, calldataload(0x0fc4)), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let eval := mulmod(mload(L_0_MPTR), addmod(calldataload(0x1044), sub(r, calldataload(0x1024)), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let gamma := mload(GAMMA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let lhs := calldataload(0x0fa4)\\n                    let rhs := calldataload(0x0f84)\\n                    lhs := mulmod(lhs, addmod(addmod(calldataload(0x08e4), mulmod(beta, calldataload(0x0e84), r), r), gamma, r), r)\\n                    lhs := mulmod(lhs, addmod(addmod(calldataload(0x0904), mulmod(beta, calldataload(0x0ea4), r), r), gamma, r), r)\\n                    lhs := mulmod(lhs, addmod(addmod(calldataload(0x0924), mulmod(beta, calldataload(0x0ec4), r), r), gamma, r), r)\\n                    mstore(0x00, mulmod(beta, mload(X_MPTR), r))\\n                    rhs := mulmod(rhs, addmod(addmod(calldataload(0x08e4), mload(0x00), r), gamma, r), r)\\n                    mstore(0x00, mulmod(mload(0x00), delta, r))\\n                    rhs := mulmod(rhs, addmod(addmod(calldataload(0x0904), mload(0x00), r), gamma, r), r)\\n                    mstore(0x00, mulmod(mload(0x00), delta, r))\\n                    rhs := mulmod(rhs, addmod(addmod(calldataload(0x0924), mload(0x00), r), gamma, r), r)\\n                    mstore(0x00, mulmod(mload(0x00), delta, r))\\n                    let left_sub_right := addmod(lhs, sub(r, rhs), r)\\n                    let eval := addmod(left_sub_right, sub(r, mulmod(left_sub_right, addmod(mload(L_LAST_MPTR), mload(L_BLIND_MPTR), r), r)), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let gamma := mload(GAMMA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let lhs := calldataload(0x1004)\\n                    let rhs := calldataload(0x0fe4)\\n                    lhs := mulmod(lhs, addmod(addmod(calldataload(0x0944), mulmod(beta, calldataload(0x0ee4), r), r), gamma, r), r)\\n                    lhs := mulmod(lhs, addmod(addmod(calldataload(0x0964), mulmod(beta, calldataload(0x0f04), r), r), gamma, r), r)\\n                    lhs := mulmod(lhs, addmod(addmod(calldataload(0x0984), mulmod(beta, calldataload(0x0f24), r), r), gamma, r), r)\\n                    rhs := mulmod(rhs, addmod(addmod(calldataload(0x0944), mload(0x00), r), gamma, r), r)\\n                    mstore(0x00, mulmod(mload(0x00), delta, r))\\n                    rhs := mulmod(rhs, addmod(addmod(calldataload(0x0964), mload(0x00), r), gamma, r), r)\\n                    mstore(0x00, mulmod(mload(0x00), delta, r))\\n                    rhs := mulmod(rhs, addmod(addmod(calldataload(0x0984), mload(0x00), r), gamma, r), r)\\n                    mstore(0x00, mulmod(mload(0x00), delta, r))\\n                    let left_sub_right := addmod(lhs, sub(r, rhs), r)\\n                    let eval := addmod(left_sub_right, sub(r, mulmod(left_sub_right, addmod(mload(L_LAST_MPTR), mload(L_BLIND_MPTR), r), r)), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let gamma := mload(GAMMA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let lhs := calldataload(0x1064)\\n                    let rhs := calldataload(0x1044)\\n                    lhs := mulmod(lhs, addmod(addmod(calldataload(0x09c4), mulmod(beta, calldataload(0x0f44), r), r), gamma, r), r)\\n                    lhs := mulmod(lhs, addmod(addmod(mload(INSTANCE_EVAL_MPTR), mulmod(beta, calldataload(0x0f64), r), r), gamma, r), r)\\n                    rhs := mulmod(rhs, addmod(addmod(calldataload(0x09c4), mload(0x00), r), gamma, r), r)\\n                    mstore(0x00, mulmod(mload(0x00), delta, r))\\n                    rhs := mulmod(rhs, addmod(addmod(mload(INSTANCE_EVAL_MPTR), mload(0x00), r), gamma, r), r)\\n                    let left_sub_right := addmod(lhs, sub(r, rhs), r)\\n                    let eval := addmod(left_sub_right, sub(r, mulmod(left_sub_right, addmod(mload(L_LAST_MPTR), mload(L_BLIND_MPTR), r), r)), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_0 := mload(L_0_MPTR)\\n                    let eval := mulmod(l_0, calldataload(0x1084), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_last := mload(L_LAST_MPTR)\\n                    let eval := mulmod(l_last, calldataload(0x1084), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let theta := mload(THETA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let table\\n                    {\\n                        let f_1 := calldataload(0x09e4)\\n                        let f_2 := calldataload(0x0a04)\\n                        table := f_1\\n                        table := addmod(mulmod(table, theta, r), f_2, r)\\n                        table := addmod(table, beta, r)\\n                    }\\n                    let input_0\\n                    {\\n                        let f_27 := calldataload(0x0d24)\\n                        let var0 := 0x1\\n                        let var1 := mulmod(f_27, var0, r)\\n                        let a_0 := calldataload(0x08e4)\\n                        let var2 := mulmod(var1, a_0, r)\\n                        let var3 := sub(r, var1)\\n                        let var4 := addmod(var0, var3, r)\\n                        let var5 := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffe15f\\n                        let var6 := mulmod(var4, var5, r)\\n                        let var7 := addmod(var2, var6, r)\\n                        let a_4 := calldataload(0x0964)\\n                        let var8 := mulmod(var1, a_4, r)\\n                        let var9 := 0x0\\n                        let var10 := mulmod(var4, var9, r)\\n                        let var11 := addmod(var8, var10, r)\\n                        input_0 := var7\\n                        input_0 := addmod(mulmod(input_0, theta, r), var11, r)\\n                        input_0 := addmod(input_0, beta, r)\\n                    }\\n                    let lhs\\n                    let rhs\\n                    rhs := table\\n                    {\\n                        let tmp := input_0\\n                        rhs := addmod(rhs, sub(r, mulmod(calldataload(0x10c4), tmp, r)), r)\\n                        lhs := mulmod(mulmod(table, tmp, r), addmod(calldataload(0x10a4), sub(r, calldataload(0x1084)), r), r)\\n                    }\\n                    let eval := mulmod(addmod(1, sub(r, addmod(mload(L_BLIND_MPTR), mload(L_LAST_MPTR), r)), r), addmod(lhs, sub(r, rhs), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_0 := mload(L_0_MPTR)\\n                    let eval := mulmod(l_0, calldataload(0x10e4), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_last := mload(L_LAST_MPTR)\\n                    let eval := mulmod(l_last, calldataload(0x10e4), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let theta := mload(THETA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let table\\n                    {\\n                        let f_1 := calldataload(0x09e4)\\n                        let f_2 := calldataload(0x0a04)\\n                        table := f_1\\n                        table := addmod(mulmod(table, theta, r), f_2, r)\\n                        table := addmod(table, beta, r)\\n                    }\\n                    let input_0\\n                    {\\n                        let f_28 := calldataload(0x0d44)\\n                        let var0 := 0x1\\n                        let var1 := mulmod(f_28, var0, r)\\n                        let a_1 := calldataload(0x0904)\\n                        let var2 := mulmod(var1, a_1, r)\\n                        let var3 := sub(r, var1)\\n                        let var4 := addmod(var0, var3, r)\\n                        let var5 := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffe15f\\n                        let var6 := mulmod(var4, var5, r)\\n                        let var7 := addmod(var2, var6, r)\\n                        let a_5 := calldataload(0x0984)\\n                        let var8 := mulmod(var1, a_5, r)\\n                        let var9 := 0x0\\n                        let var10 := mulmod(var4, var9, r)\\n                        let var11 := addmod(var8, var10, r)\\n                        input_0 := var7\\n                        input_0 := addmod(mulmod(input_0, theta, r), var11, r)\\n                        input_0 := addmod(input_0, beta, r)\\n                    }\\n                    let lhs\\n                    let rhs\\n                    rhs := table\\n                    {\\n                        let tmp := input_0\\n                        rhs := addmod(rhs, sub(r, mulmod(calldataload(0x1124), tmp, r)), r)\\n                        lhs := mulmod(mulmod(table, tmp, r), addmod(calldataload(0x1104), sub(r, calldataload(0x10e4)), r), r)\\n                    }\\n                    let eval := mulmod(addmod(1, sub(r, addmod(mload(L_BLIND_MPTR), mload(L_LAST_MPTR), r)), r), addmod(lhs, sub(r, rhs), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_0 := mload(L_0_MPTR)\\n                    let eval := mulmod(l_0, calldataload(0x1144), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_last := mload(L_LAST_MPTR)\\n                    let eval := mulmod(l_last, calldataload(0x1144), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let theta := mload(THETA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let table\\n                    {\\n                        let f_1 := calldataload(0x09e4)\\n                        let f_3 := calldataload(0x0a24)\\n                        table := f_1\\n                        table := addmod(mulmod(table, theta, r), f_3, r)\\n                        table := addmod(table, beta, r)\\n                    }\\n                    let input_0\\n                    {\\n                        let f_29 := calldataload(0x0d64)\\n                        let var0 := 0x1\\n                        let var1 := mulmod(f_29, var0, r)\\n                        let a_0 := calldataload(0x08e4)\\n                        let var2 := mulmod(var1, a_0, r)\\n                        let var3 := sub(r, var1)\\n                        let var4 := addmod(var0, var3, r)\\n                        let var5 := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffe15f\\n                        let var6 := mulmod(var4, var5, r)\\n                        let var7 := addmod(var2, var6, r)\\n                        let a_4 := calldataload(0x0964)\\n                        let var8 := mulmod(var1, a_4, r)\\n                        let var9 := 0x0\\n                        let var10 := mulmod(var4, var9, r)\\n                        let var11 := addmod(var8, var10, r)\\n                        input_0 := var7\\n                        input_0 := addmod(mulmod(input_0, theta, r), var11, r)\\n                        input_0 := addmod(input_0, beta, r)\\n                    }\\n                    let lhs\\n                    let rhs\\n                    rhs := table\\n                    {\\n                        let tmp := input_0\\n                        rhs := addmod(rhs, sub(r, mulmod(calldataload(0x1184), tmp, r)), r)\\n                        lhs := mulmod(mulmod(table, tmp, r), addmod(calldataload(0x1164), sub(r, calldataload(0x1144)), r), r)\\n                    }\\n                    let eval := mulmod(addmod(1, sub(r, addmod(mload(L_BLIND_MPTR), mload(L_LAST_MPTR), r)), r), addmod(lhs, sub(r, rhs), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_0 := mload(L_0_MPTR)\\n                    let eval := mulmod(l_0, calldataload(0x11a4), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_last := mload(L_LAST_MPTR)\\n                    let eval := mulmod(l_last, calldataload(0x11a4), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let theta := mload(THETA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let table\\n                    {\\n                        let f_1 := calldataload(0x09e4)\\n                        let f_3 := calldataload(0x0a24)\\n                        table := f_1\\n                        table := addmod(mulmod(table, theta, r), f_3, r)\\n                        table := addmod(table, beta, r)\\n                    }\\n                    let input_0\\n                    {\\n                        let f_30 := calldataload(0x0d84)\\n                        let var0 := 0x1\\n                        let var1 := mulmod(f_30, var0, r)\\n                        let a_1 := calldataload(0x0904)\\n                        let var2 := mulmod(var1, a_1, r)\\n                        let var3 := sub(r, var1)\\n                        let var4 := addmod(var0, var3, r)\\n                        let var5 := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffe15f\\n                        let var6 := mulmod(var4, var5, r)\\n                        let var7 := addmod(var2, var6, r)\\n                        let a_5 := calldataload(0x0984)\\n                        let var8 := mulmod(var1, a_5, r)\\n                        let var9 := 0x0\\n                        let var10 := mulmod(var4, var9, r)\\n                        let var11 := addmod(var8, var10, r)\\n                        input_0 := var7\\n                        input_0 := addmod(mulmod(input_0, theta, r), var11, r)\\n                        input_0 := addmod(input_0, beta, r)\\n                    }\\n                    let lhs\\n                    let rhs\\n                    rhs := table\\n                    {\\n                        let tmp := input_0\\n                        rhs := addmod(rhs, sub(r, mulmod(calldataload(0x11e4), tmp, r)), r)\\n                        lhs := mulmod(mulmod(table, tmp, r), addmod(calldataload(0x11c4), sub(r, calldataload(0x11a4)), r), r)\\n                    }\\n                    let eval := mulmod(addmod(1, sub(r, addmod(mload(L_BLIND_MPTR), mload(L_LAST_MPTR), r)), r), addmod(lhs, sub(r, rhs), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_0 := mload(L_0_MPTR)\\n                    let eval := mulmod(l_0, calldataload(0x1204), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_last := mload(L_LAST_MPTR)\\n                    let eval := mulmod(l_last, calldataload(0x1204), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let theta := mload(THETA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let table\\n                    {\\n                        let f_1 := calldataload(0x09e4)\\n                        let f_4 := calldataload(0x0a44)\\n                        table := f_1\\n                        table := addmod(mulmod(table, theta, r), f_4, r)\\n                        table := addmod(table, beta, r)\\n                    }\\n                    let input_0\\n                    {\\n                        let f_31 := calldataload(0x0da4)\\n                        let var0 := 0x1\\n                        let var1 := mulmod(f_31, var0, r)\\n                        let a_0 := calldataload(0x08e4)\\n                        let var2 := mulmod(var1, a_0, r)\\n                        let var3 := sub(r, var1)\\n                        let var4 := addmod(var0, var3, r)\\n                        let var5 := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffe15f\\n                        let var6 := mulmod(var4, var5, r)\\n                        let var7 := addmod(var2, var6, r)\\n                        let a_4 := calldataload(0x0964)\\n                        let var8 := mulmod(var1, a_4, r)\\n                        let var9 := 0x0\\n                        let var10 := mulmod(var4, var9, r)\\n                        let var11 := addmod(var8, var10, r)\\n                        input_0 := var7\\n                        input_0 := addmod(mulmod(input_0, theta, r), var11, r)\\n                        input_0 := addmod(input_0, beta, r)\\n                    }\\n                    let lhs\\n                    let rhs\\n                    rhs := table\\n                    {\\n                        let tmp := input_0\\n                        rhs := addmod(rhs, sub(r, mulmod(calldataload(0x1244), tmp, r)), r)\\n                        lhs := mulmod(mulmod(table, tmp, r), addmod(calldataload(0x1224), sub(r, calldataload(0x1204)), r), r)\\n                    }\\n                    let eval := mulmod(addmod(1, sub(r, addmod(mload(L_BLIND_MPTR), mload(L_LAST_MPTR), r)), r), addmod(lhs, sub(r, rhs), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_0 := mload(L_0_MPTR)\\n                    let eval := mulmod(l_0, calldataload(0x1264), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_last := mload(L_LAST_MPTR)\\n                    let eval := mulmod(l_last, calldataload(0x1264), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let theta := mload(THETA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let table\\n                    {\\n                        let f_1 := calldataload(0x09e4)\\n                        let f_4 := calldataload(0x0a44)\\n                        table := f_1\\n                        table := addmod(mulmod(table, theta, r), f_4, r)\\n                        table := addmod(table, beta, r)\\n                    }\\n                    let input_0\\n                    {\\n                        let f_32 := calldataload(0x0dc4)\\n                        let var0 := 0x1\\n                        let var1 := mulmod(f_32, var0, r)\\n                        let a_1 := calldataload(0x0904)\\n                        let var2 := mulmod(var1, a_1, r)\\n                        let var3 := sub(r, var1)\\n                        let var4 := addmod(var0, var3, r)\\n                        let var5 := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffe15f\\n                        let var6 := mulmod(var4, var5, r)\\n                        let var7 := addmod(var2, var6, r)\\n                        let a_5 := calldataload(0x0984)\\n                        let var8 := mulmod(var1, a_5, r)\\n                        let var9 := 0x0\\n                        let var10 := mulmod(var4, var9, r)\\n                        let var11 := addmod(var8, var10, r)\\n                        input_0 := var7\\n                        input_0 := addmod(mulmod(input_0, theta, r), var11, r)\\n                        input_0 := addmod(input_0, beta, r)\\n                    }\\n                    let lhs\\n                    let rhs\\n                    rhs := table\\n                    {\\n                        let tmp := input_0\\n                        rhs := addmod(rhs, sub(r, mulmod(calldataload(0x12a4), tmp, r)), r)\\n                        lhs := mulmod(mulmod(table, tmp, r), addmod(calldataload(0x1284), sub(r, calldataload(0x1264)), r), r)\\n                    }\\n                    let eval := mulmod(addmod(1, sub(r, addmod(mload(L_BLIND_MPTR), mload(L_LAST_MPTR), r)), r), addmod(lhs, sub(r, rhs), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_0 := mload(L_0_MPTR)\\n                    let eval := mulmod(l_0, calldataload(0x12c4), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_last := mload(L_LAST_MPTR)\\n                    let eval := mulmod(l_last, calldataload(0x12c4), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let theta := mload(THETA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let table\\n                    {\\n                        let f_1 := calldataload(0x09e4)\\n                        let f_5 := calldataload(0x0a64)\\n                        table := f_1\\n                        table := addmod(mulmod(table, theta, r), f_5, r)\\n                        table := addmod(table, beta, r)\\n                    }\\n                    let input_0\\n                    {\\n                        let f_33 := calldataload(0x0de4)\\n                        let var0 := 0x1\\n                        let var1 := mulmod(f_33, var0, r)\\n                        let a_0 := calldataload(0x08e4)\\n                        let var2 := mulmod(var1, a_0, r)\\n                        let var3 := sub(r, var1)\\n                        let var4 := addmod(var0, var3, r)\\n                        let var5 := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffe15f\\n                        let var6 := mulmod(var4, var5, r)\\n                        let var7 := addmod(var2, var6, r)\\n                        let a_4 := calldataload(0x0964)\\n                        let var8 := mulmod(var1, a_4, r)\\n                        let var9 := 0x0\\n                        let var10 := mulmod(var4, var9, r)\\n                        let var11 := addmod(var8, var10, r)\\n                        input_0 := var7\\n                        input_0 := addmod(mulmod(input_0, theta, r), var11, r)\\n                        input_0 := addmod(input_0, beta, r)\\n                    }\\n                    let lhs\\n                    let rhs\\n                    rhs := table\\n                    {\\n                        let tmp := input_0\\n                        rhs := addmod(rhs, sub(r, mulmod(calldataload(0x1304), tmp, r)), r)\\n                        lhs := mulmod(mulmod(table, tmp, r), addmod(calldataload(0x12e4), sub(r, calldataload(0x12c4)), r), r)\\n                    }\\n                    let eval := mulmod(addmod(1, sub(r, addmod(mload(L_BLIND_MPTR), mload(L_LAST_MPTR), r)), r), addmod(lhs, sub(r, rhs), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_0 := mload(L_0_MPTR)\\n                    let eval := mulmod(l_0, calldataload(0x1324), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_last := mload(L_LAST_MPTR)\\n                    let eval := mulmod(l_last, calldataload(0x1324), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let theta := mload(THETA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let table\\n                    {\\n                        let f_1 := calldataload(0x09e4)\\n                        let f_5 := calldataload(0x0a64)\\n                        table := f_1\\n                        table := addmod(mulmod(table, theta, r), f_5, r)\\n                        table := addmod(table, beta, r)\\n                    }\\n                    let input_0\\n                    {\\n                        let f_34 := calldataload(0x0e04)\\n                        let var0 := 0x1\\n                        let var1 := mulmod(f_34, var0, r)\\n                        let a_1 := calldataload(0x0904)\\n                        let var2 := mulmod(var1, a_1, r)\\n                        let var3 := sub(r, var1)\\n                        let var4 := addmod(var0, var3, r)\\n                        let var5 := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffe15f\\n                        let var6 := mulmod(var4, var5, r)\\n                        let var7 := addmod(var2, var6, r)\\n                        let a_5 := calldataload(0x0984)\\n                        let var8 := mulmod(var1, a_5, r)\\n                        let var9 := 0x0\\n                        let var10 := mulmod(var4, var9, r)\\n                        let var11 := addmod(var8, var10, r)\\n                        input_0 := var7\\n                        input_0 := addmod(mulmod(input_0, theta, r), var11, r)\\n                        input_0 := addmod(input_0, beta, r)\\n                    }\\n                    let lhs\\n                    let rhs\\n                    rhs := table\\n                    {\\n                        let tmp := input_0\\n                        rhs := addmod(rhs, sub(r, mulmod(calldataload(0x1364), tmp, r)), r)\\n                        lhs := mulmod(mulmod(table, tmp, r), addmod(calldataload(0x1344), sub(r, calldataload(0x1324)), r), r)\\n                    }\\n                    let eval := mulmod(addmod(1, sub(r, addmod(mload(L_BLIND_MPTR), mload(L_LAST_MPTR), r)), r), addmod(lhs, sub(r, rhs), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_0 := mload(L_0_MPTR)\\n                    let eval := mulmod(l_0, calldataload(0x1384), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_last := mload(L_LAST_MPTR)\\n                    let eval := mulmod(l_last, calldataload(0x1384), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let theta := mload(THETA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let table\\n                    {\\n                        let f_6 := calldataload(0x0a84)\\n                        table := f_6\\n                        table := addmod(table, beta, r)\\n                    }\\n                    let input_0\\n                    {\\n                        let f_35 := calldataload(0x0e24)\\n                        let a_0 := calldataload(0x08e4)\\n                        let var0 := mulmod(f_35, a_0, r)\\n                        let var1 := 0x1\\n                        let var2 := sub(r, f_35)\\n                        let var3 := addmod(var1, var2, r)\\n                        let var4 := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff\\n                        let var5 := mulmod(var3, var4, r)\\n                        let var6 := addmod(var0, var5, r)\\n                        input_0 := var6\\n                        input_0 := addmod(input_0, beta, r)\\n                    }\\n                    let lhs\\n                    let rhs\\n                    rhs := table\\n                    {\\n                        let tmp := input_0\\n                        rhs := addmod(rhs, sub(r, mulmod(calldataload(0x13c4), tmp, r)), r)\\n                        lhs := mulmod(mulmod(table, tmp, r), addmod(calldataload(0x13a4), sub(r, calldataload(0x1384)), r), r)\\n                    }\\n                    let eval := mulmod(addmod(1, sub(r, addmod(mload(L_BLIND_MPTR), mload(L_LAST_MPTR), r)), r), addmod(lhs, sub(r, rhs), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_0 := mload(L_0_MPTR)\\n                    let eval := mulmod(l_0, calldataload(0x13e4), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let l_last := mload(L_LAST_MPTR)\\n                    let eval := mulmod(l_last, calldataload(0x13e4), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n                {\\n                    let theta := mload(THETA_MPTR)\\n                    let beta := mload(BETA_MPTR)\\n                    let table\\n                    {\\n                        let f_6 := calldataload(0x0a84)\\n                        table := f_6\\n                        table := addmod(table, beta, r)\\n                    }\\n                    let input_0\\n                    {\\n                        let f_36 := calldataload(0x0e44)\\n                        let a_1 := calldataload(0x0904)\\n                        let var0 := mulmod(f_36, a_1, r)\\n                        let var1 := 0x1\\n                        let var2 := sub(r, f_36)\\n                        let var3 := addmod(var1, var2, r)\\n                        let var4 := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff\\n                        let var5 := mulmod(var3, var4, r)\\n                        let var6 := addmod(var0, var5, r)\\n                        input_0 := var6\\n                        input_0 := addmod(input_0, beta, r)\\n                    }\\n                    let lhs\\n                    let rhs\\n                    rhs := table\\n                    {\\n                        let tmp := input_0\\n                        rhs := addmod(rhs, sub(r, mulmod(calldataload(0x1424), tmp, r)), r)\\n                        lhs := mulmod(mulmod(table, tmp, r), addmod(calldataload(0x1404), sub(r, calldataload(0x13e4)), r), r)\\n                    }\\n                    let eval := mulmod(addmod(1, sub(r, addmod(mload(L_BLIND_MPTR), mload(L_LAST_MPTR), r)), r), addmod(lhs, sub(r, rhs), r), r)\\n                    quotient_eval_numer := addmod(mulmod(quotient_eval_numer, y, r), eval, r)\\n                }\\n\\n                pop(y)\\n                pop(delta)\\n\\n                let quotient_eval := mulmod(quotient_eval_numer, mload(X_N_MINUS_1_INV_MPTR), r)\\n                mstore(QUOTIENT_EVAL_MPTR, quotient_eval)\\n            }\\n\\n            // Compute quotient commitment\\n            {\\n                mstore(0x00, calldataload(LAST_QUOTIENT_X_CPTR))\\n                mstore(0x20, calldataload(add(LAST_QUOTIENT_X_CPTR, 0x20)))\\n                let x_n := mload(X_N_MPTR)\\n                for\\n                    {\\n                        let cptr := sub(LAST_QUOTIENT_X_CPTR, 0x40)\\n                        let cptr_end := sub(FIRST_QUOTIENT_X_CPTR, 0x40)\\n                    }\\n                    lt(cptr_end, cptr)\\n                    {}\\n                {\\n                    success := ec_mul_acc(success, x_n)\\n                    success := ec_add_acc(success, calldataload(cptr), calldataload(add(cptr, 0x20)))\\n                    cptr := sub(cptr, 0x40)\\n                }\\n                mstore(QUOTIENT_X_MPTR, mload(0x00))\\n                mstore(QUOTIENT_Y_MPTR, mload(0x20))\\n            }\\n\\n            // Compute pairing lhs and rhs\\n            {\\n                {\\n                    let x := mload(X_MPTR)\\n                    let omega := mload(OMEGA_MPTR)\\n                    let omega_inv := mload(OMEGA_INV_MPTR)\\n                    let x_pow_of_omega := mulmod(x, omega, r)\\n                    mstore(0x0360, x_pow_of_omega)\\n                    mstore(0x0340, x)\\n                    x_pow_of_omega := mulmod(x, omega_inv, r)\\n                    mstore(0x0320, x_pow_of_omega)\\n                    x_pow_of_omega := mulmod(x_pow_of_omega, omega_inv, r)\\n                    x_pow_of_omega := mulmod(x_pow_of_omega, omega_inv, r)\\n                    x_pow_of_omega := mulmod(x_pow_of_omega, omega_inv, r)\\n                    x_pow_of_omega := mulmod(x_pow_of_omega, omega_inv, r)\\n                    x_pow_of_omega := mulmod(x_pow_of_omega, omega_inv, r)\\n                    mstore(0x0300, x_pow_of_omega)\\n                }\\n                {\\n                    let mu := mload(MU_MPTR)\\n                    for\\n                        {\\n                            let mptr := 0x0380\\n                            let mptr_end := 0x0400\\n                            let point_mptr := 0x0300\\n                        }\\n                        lt(mptr, mptr_end)\\n                        {\\n                            mptr := add(mptr, 0x20)\\n                            point_mptr := add(point_mptr, 0x20)\\n                        }\\n                    {\\n                        mstore(mptr, addmod(mu, sub(r, mload(point_mptr)), r))\\n                    }\\n                    let s\\n                    s := mload(0x03c0)\\n                    mstore(0x0400, s)\\n                    let diff\\n                    diff := mload(0x0380)\\n                    diff := mulmod(diff, mload(0x03a0), r)\\n                    diff := mulmod(diff, mload(0x03e0), r)\\n                    mstore(0x0420, diff)\\n                    mstore(0x00, diff)\\n                    diff := mload(0x0380)\\n                    diff := mulmod(diff, mload(0x03e0), r)\\n                    mstore(0x0440, diff)\\n                    diff := mload(0x03a0)\\n                    mstore(0x0460, diff)\\n                    diff := mload(0x0380)\\n                    diff := mulmod(diff, mload(0x03a0), r)\\n                    mstore(0x0480, diff)\\n                }\\n                {\\n                    let point_2 := mload(0x0340)\\n                    let coeff\\n                    coeff := 1\\n                    coeff := mulmod(coeff, mload(0x03c0), r)\\n                    mstore(0x20, coeff)\\n                }\\n                {\\n                    let point_1 := mload(0x0320)\\n                    let point_2 := mload(0x0340)\\n                    let coeff\\n                    coeff := addmod(point_1, sub(r, point_2), r)\\n                    coeff := mulmod(coeff, mload(0x03a0), r)\\n                    mstore(0x40, coeff)\\n                    coeff := addmod(point_2, sub(r, point_1), r)\\n                    coeff := mulmod(coeff, mload(0x03c0), r)\\n                    mstore(0x60, coeff)\\n                }\\n                {\\n                    let point_0 := mload(0x0300)\\n                    let point_2 := mload(0x0340)\\n                    let point_3 := mload(0x0360)\\n                    let coeff\\n                    coeff := addmod(point_0, sub(r, point_2), r)\\n                    coeff := mulmod(coeff, addmod(point_0, sub(r, point_3), r), r)\\n                    coeff := mulmod(coeff, mload(0x0380), r)\\n                    mstore(0x80, coeff)\\n                    coeff := addmod(point_2, sub(r, point_0), r)\\n                    coeff := mulmod(coeff, addmod(point_2, sub(r, point_3), r), r)\\n                    coeff := mulmod(coeff, mload(0x03c0), r)\\n                    mstore(0xa0, coeff)\\n                    coeff := addmod(point_3, sub(r, point_0), r)\\n                    coeff := mulmod(coeff, addmod(point_3, sub(r, point_2), r), r)\\n                    coeff := mulmod(coeff, mload(0x03e0), r)\\n                    mstore(0xc0, coeff)\\n                }\\n                {\\n                    let point_2 := mload(0x0340)\\n                    let point_3 := mload(0x0360)\\n                    let coeff\\n                    coeff := addmod(point_2, sub(r, point_3), r)\\n                    coeff := mulmod(coeff, mload(0x03c0), r)\\n                    mstore(0xe0, coeff)\\n                    coeff := addmod(point_3, sub(r, point_2), r)\\n                    coeff := mulmod(coeff, mload(0x03e0), r)\\n                    mstore(0x0100, coeff)\\n                }\\n                {\\n                    success := batch_invert(success, 0, 0x0120, r)\\n                    let diff_0_inv := mload(0x00)\\n                    mstore(0x0420, diff_0_inv)\\n                    for\\n                        {\\n                            let mptr := 0x0440\\n                            let mptr_end := 0x04a0\\n                        }\\n                        lt(mptr, mptr_end)\\n                        { mptr := add(mptr, 0x20) }\\n                    {\\n                        mstore(mptr, mulmod(mload(mptr), diff_0_inv, r))\\n                    }\\n                }\\n                {\\n                    let coeff := mload(0x20)\\n                    let zeta := mload(ZETA_MPTR)\\n                    let r_eval := 0\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x0e64), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, mload(QUOTIENT_EVAL_MPTR), r), r)\\n                    for\\n                        {\\n                            let mptr := 0x0f64\\n                            let mptr_end := 0x0e64\\n                        }\\n                        lt(mptr_end, mptr)\\n                        { mptr := sub(mptr, 0x20) }\\n                    {\\n                        r_eval := addmod(mulmod(r_eval, zeta, r), mulmod(coeff, calldataload(mptr), r), r)\\n                    }\\n                    for\\n                        {\\n                            let mptr := 0x0e44\\n                            let mptr_end := 0x09a4\\n                        }\\n                        lt(mptr_end, mptr)\\n                        { mptr := sub(mptr, 0x20) }\\n                    {\\n                        r_eval := addmod(mulmod(r_eval, zeta, r), mulmod(coeff, calldataload(mptr), r), r)\\n                    }\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x1424), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x13c4), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x1364), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x1304), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x12a4), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x1244), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x11e4), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x1184), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x1124), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x10c4), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(coeff, calldataload(0x0984), r), r)\\n                    for\\n                        {\\n                            let mptr := 0x0944\\n                            let mptr_end := 0x08c4\\n                        }\\n                        lt(mptr_end, mptr)\\n                        { mptr := sub(mptr, 0x20) }\\n                    {\\n                        r_eval := addmod(mulmod(r_eval, zeta, r), mulmod(coeff, calldataload(mptr), r), r)\\n                    }\\n                    mstore(0x04a0, r_eval)\\n                }\\n                {\\n                    let zeta := mload(ZETA_MPTR)\\n                    let r_eval := 0\\n                    r_eval := addmod(r_eval, mulmod(mload(0x40), calldataload(0x09a4), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x60), calldataload(0x0964), r), r)\\n                    r_eval := mulmod(r_eval, mload(0x0440), r)\\n                    mstore(0x04c0, r_eval)\\n                }\\n                {\\n                    let zeta := mload(ZETA_MPTR)\\n                    let r_eval := 0\\n                    r_eval := addmod(r_eval, mulmod(mload(0x80), calldataload(0x1024), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xa0), calldataload(0x0fe4), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xc0), calldataload(0x1004), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x80), calldataload(0x0fc4), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xa0), calldataload(0x0f84), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xc0), calldataload(0x0fa4), r), r)\\n                    r_eval := mulmod(r_eval, mload(0x0460), r)\\n                    mstore(0x04e0, r_eval)\\n                }\\n                {\\n                    let zeta := mload(ZETA_MPTR)\\n                    let r_eval := 0\\n                    r_eval := addmod(r_eval, mulmod(mload(0xe0), calldataload(0x13e4), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x0100), calldataload(0x1404), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xe0), calldataload(0x1384), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x0100), calldataload(0x13a4), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xe0), calldataload(0x1324), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x0100), calldataload(0x1344), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xe0), calldataload(0x12c4), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x0100), calldataload(0x12e4), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xe0), calldataload(0x1264), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x0100), calldataload(0x1284), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xe0), calldataload(0x1204), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x0100), calldataload(0x1224), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xe0), calldataload(0x11a4), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x0100), calldataload(0x11c4), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xe0), calldataload(0x1144), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x0100), calldataload(0x1164), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xe0), calldataload(0x10e4), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x0100), calldataload(0x1104), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xe0), calldataload(0x1084), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x0100), calldataload(0x10a4), r), r)\\n                    r_eval := mulmod(r_eval, zeta, r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0xe0), calldataload(0x1044), r), r)\\n                    r_eval := addmod(r_eval, mulmod(mload(0x0100), calldataload(0x1064), r), r)\\n                    r_eval := mulmod(r_eval, mload(0x0480), r)\\n                    mstore(0x0500, r_eval)\\n                }\\n                {\\n                    let sum := mload(0x20)\\n                    mstore(0x0520, sum)\\n                }\\n                {\\n                    let sum := mload(0x40)\\n                    sum := addmod(sum, mload(0x60), r)\\n                    mstore(0x0540, sum)\\n                }\\n                {\\n                    let sum := mload(0x80)\\n                    sum := addmod(sum, mload(0xa0), r)\\n                    sum := addmod(sum, mload(0xc0), r)\\n                    mstore(0x0560, sum)\\n                }\\n                {\\n                    let sum := mload(0xe0)\\n                    sum := addmod(sum, mload(0x0100), r)\\n                    mstore(0x0580, sum)\\n                }\\n                {\\n                    for\\n                        {\\n                            let mptr := 0x00\\n                            let mptr_end := 0x80\\n                            let sum_mptr := 0x0520\\n                        }\\n                        lt(mptr, mptr_end)\\n                        {\\n                            mptr := add(mptr, 0x20)\\n                            sum_mptr := add(sum_mptr, 0x20)\\n                        }\\n                    {\\n                        mstore(mptr, mload(sum_mptr))\\n                    }\\n                    success := batch_invert(success, 0, 0x80, r)\\n                    let r_eval := mulmod(mload(0x60), mload(0x0500), r)\\n                    for\\n                        {\\n                            let sum_inv_mptr := 0x40\\n                            let sum_inv_mptr_end := 0x80\\n                            let r_eval_mptr := 0x04e0\\n                        }\\n                        lt(sum_inv_mptr, sum_inv_mptr_end)\\n                        {\\n                            sum_inv_mptr := sub(sum_inv_mptr, 0x20)\\n                            r_eval_mptr := sub(r_eval_mptr, 0x20)\\n                        }\\n                    {\\n                        r_eval := mulmod(r_eval, mload(NU_MPTR), r)\\n                        r_eval := addmod(r_eval, mulmod(mload(sum_inv_mptr), mload(r_eval_mptr), r), r)\\n                    }\\n                    mstore(R_EVAL_MPTR, r_eval)\\n                }\\n                {\\n                    let nu := mload(NU_MPTR)\\n                    mstore(0x00, calldataload(0x07a4))\\n                    mstore(0x20, calldataload(0x07c4))\\n                    success := ec_mul_acc(success, mload(ZETA_MPTR))\\n                    success := ec_add_acc(success, mload(QUOTIENT_X_MPTR), mload(QUOTIENT_Y_MPTR))\\n                    for\\n                        {\\n                            let mptr := 0x1340\\n                            let mptr_end := 0x0800\\n                        }\\n                        lt(mptr_end, mptr)\\n                        { mptr := sub(mptr, 0x40) }\\n                    {\\n                        success := ec_mul_acc(success, mload(ZETA_MPTR))\\n                        success := ec_add_acc(success, mload(mptr), mload(add(mptr, 0x20)))\\n                    }\\n                    for\\n                        {\\n                            let mptr := 0x0424\\n                            let mptr_end := 0x0164\\n                        }\\n                        lt(mptr_end, mptr)\\n                        { mptr := sub(mptr, 0x40) }\\n                    {\\n                        success := ec_mul_acc(success, mload(ZETA_MPTR))\\n                        success := ec_add_acc(success, calldataload(mptr), calldataload(add(mptr, 0x20)))\\n                    }\\n                    for\\n                        {\\n                            let mptr := 0x0124\\n                            let mptr_end := 0x24\\n                        }\\n                        lt(mptr_end, mptr)\\n                        { mptr := sub(mptr, 0x40) }\\n                    {\\n                        success := ec_mul_acc(success, mload(ZETA_MPTR))\\n                        success := ec_add_acc(success, calldataload(mptr), calldataload(add(mptr, 0x20)))\\n                    }\\n                    mstore(0x80, calldataload(0x0164))\\n                    mstore(0xa0, calldataload(0x0184))\\n                    success := ec_mul_tmp(success, mulmod(nu, mload(0x0440), r))\\n                    success := ec_add_acc(success, mload(0x80), mload(0xa0))\\n                    nu := mulmod(nu, mload(NU_MPTR), r)\\n                    mstore(0x80, calldataload(0x04a4))\\n                    mstore(0xa0, calldataload(0x04c4))\\n                    success := ec_mul_tmp(success, mload(ZETA_MPTR))\\n                    success := ec_add_tmp(success, calldataload(0x0464), calldataload(0x0484))\\n                    success := ec_mul_tmp(success, mulmod(nu, mload(0x0460), r))\\n                    success := ec_add_acc(success, mload(0x80), mload(0xa0))\\n                    nu := mulmod(nu, mload(NU_MPTR), r)\\n                    mstore(0x80, calldataload(0x0764))\\n                    mstore(0xa0, calldataload(0x0784))\\n                    for\\n                        {\\n                            let mptr := 0x0724\\n                            let mptr_end := 0x04a4\\n                        }\\n                        lt(mptr_end, mptr)\\n                        { mptr := sub(mptr, 0x40) }\\n                    {\\n                        success := ec_mul_tmp(success, mload(ZETA_MPTR))\\n                        success := ec_add_tmp(success, calldataload(mptr), calldataload(add(mptr, 0x20)))\\n                    }\\n                    success := ec_mul_tmp(success, mulmod(nu, mload(0x0480), r))\\n                    success := ec_add_acc(success, mload(0x80), mload(0xa0))\\n                    mstore(0x80, mload(G1_X_MPTR))\\n                    mstore(0xa0, mload(G1_Y_MPTR))\\n                    success := ec_mul_tmp(success, sub(r, mload(R_EVAL_MPTR)))\\n                    success := ec_add_acc(success, mload(0x80), mload(0xa0))\\n                    mstore(0x80, calldataload(0x1444))\\n                    mstore(0xa0, calldataload(0x1464))\\n                    success := ec_mul_tmp(success, sub(r, mload(0x0400)))\\n                    success := ec_add_acc(success, mload(0x80), mload(0xa0))\\n                    mstore(0x80, calldataload(0x1484))\\n                    mstore(0xa0, calldataload(0x14a4))\\n                    success := ec_mul_tmp(success, mload(MU_MPTR))\\n                    success := ec_add_acc(success, mload(0x80), mload(0xa0))\\n                    mstore(PAIRING_LHS_X_MPTR, mload(0x00))\\n                    mstore(PAIRING_LHS_Y_MPTR, mload(0x20))\\n                    mstore(PAIRING_RHS_X_MPTR, calldataload(0x1484))\\n                    mstore(PAIRING_RHS_Y_MPTR, calldataload(0x14a4))\\n                }\\n            }\\n\\n            // Random linear combine with accumulator\\n            if mload(HAS_ACCUMULATOR_MPTR) {\\n                mstore(0x00, mload(ACC_LHS_X_MPTR))\\n                mstore(0x20, mload(ACC_LHS_Y_MPTR))\\n                mstore(0x40, mload(ACC_RHS_X_MPTR))\\n                mstore(0x60, mload(ACC_RHS_Y_MPTR))\\n                mstore(0x80, mload(PAIRING_LHS_X_MPTR))\\n                mstore(0xa0, mload(PAIRING_LHS_Y_MPTR))\\n                mstore(0xc0, mload(PAIRING_RHS_X_MPTR))\\n                mstore(0xe0, mload(PAIRING_RHS_Y_MPTR))\\n                let challenge := mod(keccak256(0x00, 0x100), r)\\n\\n                // [pairing_lhs] += challenge * [acc_lhs]\\n                success := ec_mul_acc(success, challenge)\\n                success := ec_add_acc(success, mload(PAIRING_LHS_X_MPTR), mload(PAIRING_LHS_Y_MPTR))\\n                mstore(PAIRING_LHS_X_MPTR, mload(0x00))\\n                mstore(PAIRING_LHS_Y_MPTR, mload(0x20))\\n\\n                // [pairing_rhs] += challenge * [acc_rhs]\\n                mstore(0x00, mload(ACC_RHS_X_MPTR))\\n                mstore(0x20, mload(ACC_RHS_Y_MPTR))\\n                success := ec_mul_acc(success, challenge)\\n                success := ec_add_acc(success, mload(PAIRING_RHS_X_MPTR), mload(PAIRING_RHS_Y_MPTR))\\n                mstore(PAIRING_RHS_X_MPTR, mload(0x00))\\n                mstore(PAIRING_RHS_Y_MPTR, mload(0x20))\\n            }\\n\\n            // Perform pairing\\n            success := ec_pairing(\\n                success,\\n                mload(PAIRING_LHS_X_MPTR),\\n                mload(PAIRING_LHS_Y_MPTR),\\n                mload(PAIRING_RHS_X_MPTR),\\n                mload(PAIRING_RHS_Y_MPTR)\\n            )\\n\\n            // Revert if anything fails\\n            if iszero(success) {\\n                revert(0x00, 0x00)\\n            }\\n\\n            // Return 1 as result if everything succeeds\\n            mstore(0x00, 1)\\n            return(0x00, 0x20)\\n        }\\n    }\\n}\",\"keccak256\":\"0x78568f8237ef6022c245504df5664b869dbf9969b3b167bbf521d3e7bc20ba97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f54806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631e8e1e1314610030575b600080fd5b61004361003e366004612e39565b610057565b604051901515815260200160405180910390f35b6000610263565b60008060008435602086013588821086169450888110851694508860038a8b858609850908898283099289526020890191909152149290921696604094850196509390940193505050565b60016020536021600090812092830682529190915260200190565b6000838351602085015b602087038110156100f0578781518309808452602093840193909250016100ce565b8781518309915060208352602080840152602060408401528160608401526002880360808401528760a084015260208360c08560055afa851693508251915085602081016020850394505b828110156101635789855185098a84518609908452601f19958601959094509092019161013b565b8981518509945089825185099490915292909252509095945050505050565b81604052826060526000604060006080600060065afa9091169392505050565b816040526000604060006060600060075afa90911692915050565b8160c0528260e05260006040608080608060065afa9091169392505050565b8160c0526000604060806060608060075afa90911692915050565b81600052826020526107405160405261076051606052610780516080526107a05160a0528360c0528460e0526107c051610100526107e0516101205261080051610140526108205161016052600060206000610180600060085afa600051921690911695945050505050565b7f015ed1eb11aeda63673c5cd1d21e7576d6d9b610127552013d058798ad9942a96105a081905260036105c08190526000919091527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001906114c435811461146060443514166001169060206114e46115445b8082101561031a57813580845286119490941693602092830192909101906102f7565b506064925061138090506101e45b808410156103475761033c8784868861005e565b945094509450610328565b5060009182208581068252909152602090810161028083015b8084101561037f576103748784868861005e565b945094509450610360565b5060009182208581068252909152602090810161039c85826100a9565b905061038083015b808410156103c3576103b88784868861005e565b9450945094506103a4565b5060009182208581068252909152602090810161010083015b808410156103fb576103f08784868861005e565b9450945094506103dc565b50600091822085810682529091526020908101610b6083015b808410156104375783358084528611949094169360209384019390920191610414565b5060009182208581068252909152602090810161045485826100a9565b90506104628683858761005e565b60009081208881069094529290925293509150602090506104858582848661005e565b92509250925050507f015ed1eb11aeda63673c5cd1d21e7576d6d9b610127552013d058798ad9942a96105a05260036105c05260136105e0527f3064486657634403844b0eac78ca882cfd284341fcb0615a15cfcd17b14d8201610600527f0cf1526aaafac6bacbb67d11a4077806b123f767e4b0883d14cc0193568fc082610620527f20784546081c2aba227a9c15990bf6983ba2a2758faf563f38b437203ee230a9610640527f230385eb1034f58ed905d7dafbbf62da84661de658f682a719d8836889e048576106605260006106805260006106a05260006106c05260006106e0526001610700526002610720527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2610740527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed610760527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b610780527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6107a0527f186282957db913abd99f91db59fe69922e95040603ef44c0bd7aa3adeef8f5ac6107c0527f17944351223333f260ddc3b4af45191b856689eda9eab5cbcddbbe570ce860d26107e0527f06d971ff4a7467c3ec596ed6efc674572e32fd6f52b721f97e35b0b3d3546753610800527f06ecdb9f9567f59ed2eee36e1e1d58797fd13cc97fafc2910f5e8a12f202fa9a610820527f0216e1962b118a871641191e5b56ef67b7234be0ba1f6e65cc3149f4cdf7d2a4610840527f14dcba857f39b53d46db4acec4e59ee5a328d35713fd031114b75025d1ecb3cb610860527f187c9b94532ab54b1021c5f2a0961ed8cc7e6c1d6fba329813fdc75e12010253610880527f0b9e3099fb5fda92a6c4800600cdce14b40592756a6efc7ff6b7c4b016a2b5846108a0527f012490bac7f67b847cf6946033db4a632d4b8c0661c116fe4fc8bc2c5377e3106108c0527f0ce78f7694626a9f6ff31e7aae992e8ec8a9bd5fc1f25b18e3d5cf491e32022e6108e0527f0b0b730c7cc036b250580368804e6ed2056381162d89e0043b5bd98f4ee75f3a610900527f0ac8139daf06f5eea557c933528300d6f404d8695a11179c01e1faf1b8b3fc8e610920527f18bb78b97ae3439de5eb18cc8ff88b94632fd4d4a197ab1d6fbcf7cd4e208e71610940527f0f01ef2f892e9bed184b22e73245e666380819b1f89cdfe8d2a2725099bcc499610960527f07441a798ac3fd5588b3782c716810b647a50765a678f59494231a3317ef8b43610980527f2f8a11be120a83d9907b9090b91a2770d3507502a11b6f928cb1720227e07cb06109a0527f1082dd80327937416906c49ce703e84270f642e316ea7d79764b5d0ca0c176686109c0527f03882a90aef5c45d429a2a7c228f67e1ef92b4053ab40ed9ccca6fba107f5a496109e0527f0762a792c4e078b1a1601f19012b5aa2a802c88ad53ffcd0ddffc52a18441859610a00527f1b8aac3ff017c6c2688fbef6532e0ada2f70d21cb8b20cf918ad75fa40c39059610a20527f1083e2b5a2692c9dfc6bfc36b2c062ce3e9639291634299c2454f6870edc74d4610a40527f113f793e266061a8372644df1b58d827cc8a67a3e5ebbacca8188d0308b3794a610a60526000610a80526000610aa0527f2c3426f6ae01c251eb7b3ad51ac755b2248f56fa8d3eaf6a73e48b658e164514610ac0527f220ec25c20e22e59748822f57735d7dc10cc7bb9ff523a408d7be829a81df34a610ae0526000610b00526000610b20526000610b40526000610b60526000610b80526000610ba0527f0282ccf814185972925dc138ef87c90725017e68e61835dbf7e357bd019e111a610bc0527f12340e976d5284a05acd024637ee9b975e1ffd4fd2687737212667d9ef059090610be0527f0b43a13d09f0eb73dc967846a8013d832fcb609a5fb5bfaaa59476e13003d45b610c00527f2cebd1042aae886ebdb5a1abbb8d07301d9c903d2c46ab07a4780b735dc9a822610c20526000610c40526000610c60527f1374c4c06b1219a9760699a85492f97a0f17ed49ddcfce2248adc9df8cb0926a610c80527f2fce9e1ba999b7449ed4933ed8e2ad23d89e8e9cdde42b6e038e19d02dce3374610ca0526000610cc0526000610ce0526000610d00526000610d20526000610d40526000610d60527f0b5344c0f186b30f1a74579b8a4e31609a59f38cdacaedc651d3c71473d052b6610d80527f0b6d56d0bb6b2b32ea2dab46a3dadd9f8d8a0234edcbf7ac3cd2d532367792af610da0527f0c0f1a2980e4e061ec39b173145e45ff63dac660b1f5cf6ed7980bd61d03d83c610dc0527f2546f6b73d270a25fdac502ff2b4c7d41a6024c5ffe335f3364f4b6f16e6976d610de0526000610e00526000610e20526000610e40526000610e60526000610e80526000610ea0526000610ec0526000610ee0527f049df352acb3a45a7fe15558a157038d557365ff21a562a4d29b99e237818fdb610f00527f1e6ea4545cac489d51144bf36c369196454c8b5d5c483b90017ea64fcfe4963b610f20527f051699300252f4edbb6b52c8061d009f5b885dc0903500bbcfa7827a202a9d1f610f40527f18defa4a959b19b73fbcac2bbd4e9356c94314b19d58ea7c53bed9c25b195d9c610f60527f1a3f2401b386d536dc0a1ff30045d501b609cb23602eedfceef2d4264d602420610f80527f1ca4d5bc2f08eb628b63bae40ea0b40e82102dfc7bad0a4b0aa92d783d22ead2610fa0527f1a3f2401b386d536dc0a1ff30045d501b609cb23602eedfceef2d4264d602420610fc0527f1ca4d5bc2f08eb628b63bae40ea0b40e82102dfc7bad0a4b0aa92d783d22ead2610fe0527f2be8e51f2c72ca2832826b7452c64cf95f1be50f91e93086e0fcf75bf15fad62611000527f16cb505ae9236137ce904d411d583fce2aecc38e72b10398ef4af76cd7dde018611020527f2be8e51f2c72ca2832826b7452c64cf95f1be50f91e93086e0fcf75bf15fad62611040527f16cb505ae9236137ce904d411d583fce2aecc38e72b10398ef4af76cd7dde018611060527f09b8d32874c3fff46fc88d2e9b56513136b556285d9a116cf88ad95081afa015611080527f2ab67ed9a452a52afe519a10499f82cd0980f8fa7cd85dafe76d318bd3163beb6110a0527f09b8d32874c3fff46fc88d2e9b56513136b556285d9a116cf88ad95081afa0156110c0527f2ab67ed9a452a52afe519a10499f82cd0980f8fa7cd85dafe76d318bd3163beb6110e0527f2f0e4409049908c1091a4d3c59a0c816742a61b2c770d1a8caefbf68a4c68e73611100527f0fa4d0dfe99adba964723b4542bb0c4447a255f82d59f7d96168eaa341e0f149611120527f0e7fa261d2f88ea8d8e2666412fa3d3d1faa845793ddb40862e57d1c57fd0aca611140527f22c47c0930845a759ae2cf0397ae00991e40cf516144e0746fb4a5bd48de60d1611160527f044c90ab86815dccc1e3a903952d216cb666880388aeb065b0a530a840ef6fcd611180527f20423a700b0e986380db464d0f9d07a6cd027421064ba401075195b75acb56b76111a0527f296920245ccf20b76d4e25dcae40905b9f1e66c24813b7d0a95f7961fc51b9556111c0527f187c8c0640f7561170b45f89c46e5a6397e97d870323f38b4a4634135beaa3256111e0527f0c61dc15fb70d5a92088f46af977ae587649fa3ecfc442ebcaccf39c9ac728d5611200527f1a03d4641078a2d9d6f7d49430a2e37ea0796dd77fa625339ce2e85d1591de9b611220527f1e6f62336341d1b5b4b957d94793d6b4a7576925fc3a5282a485a4d3bc4fbcb3611240527f091251bea1003098fde04622b373d87834f1d06f8124a1b81ade3cf94a558cb5611260527f19246d84c2260d828f72e1fe7c289dfbe730959849f949d137e5ca40a3b76775611280527f0136424cd2d9e208f63588e0f0e89b3818bbadb6496724321a1965df43c47b286112a0527f304ea1ae8077064dd78a50e5a6e79081418ba22e75cc4d5dcd075e410375c45f6112c0527f14928efe1a73b5d3dc478d2dcf9d51ec52a8b9e52b040846a1d7fd4ec9cedf1e6112e0527f197d80284883061a16dfc9d037cc7e36f55ececbc520f89bc2f79970a81807fb611300527f0e2d5a3c74fcbf61e931c1c74e9b9f9ca916ced24ee34b65e7aac950933cd589611320527f1bb547de66663d2dc23e8269651c33fff970b1ee0ea36ec63824dce7b67f3ef9611340527f1b83c4ec52644683c8dc1810f8a3d83fb6b778226e127474b48334946446245561136052610680511561117d576106c0516106e05160206106a051026114e4016020830260028102600382028335838501358386013583870135896020028801895b818a10156111345760208a0199508935811b86019550888a0135811b85019450878a0135811b84019350868a0135811b830192508a810190506110f6565b50508c60038e8f8788098709088d848509148b169a508c60038e8f8586098509088d828309148b169a508361148052826114a052816114c052806114e052505050505050505050505b8061118757600080fd5b6105e0519250611400518060005b858110156111ab57848283099150600101611195565b5061062051945061150060066105c0510160200281016105c0516111cd576020015b610660515b818310156111f35786818803860883528688820990506020830192506111d2565b508560018703840893508381526112118660208301611500886100c4565b94506115009150856106005185099350610660515b818310156112495786878285510986098352868882099050602083019250611226565b5061152051965061154093506115c091505b81841015611275578584518808965060208401935061125b565b600091506114e46105c05160200281015b808210156112aa578788833588510985089350602082019150602086019550611286565b50505161150080516115c0519490915261152091909152611540526115609590955261158052506115a0929092526113e051600092907f09226b6e22c6f0ca64ec26aad4c86e715b5f898e5e963f25870e56bbe533e9a290610b4435610964356109243586038681830891505085818309965050610c2435905061098435610944358603868183089150508581830991505084818684890908955050610aa435610964356108e4356109243587818308880391508790508183089150508581830991505084818684890908955050610b843561098435610904356109443587818308880391508790508183089150508581830991505084818684890908955050610b0435610964356108e4356109243587818309880391508790508183089150508581830991505084818684890908955050610be43561098435610904356109443587818309880391508790508183089150508581830991505084818684890908955050610ac435610964356108e43561092435870387818308880391508790508183089150508581830991505084818684890908955050610ba435610984356109043561094435870387818308880391508790508183089150508581830991505084818684890908955050610ae435610964356109243586038603868183089150508581830991505084818684890908955050610bc435610984356109443586038603868183089150508581830991505084818684890908955050610b2435610964358581830991505084818684890908955050610c0435610984358581830991505084818684890908955050610b6435610964356000198601868183089050868183099150508581830991505084818684890908955050610c4435610984356000198601868183089050868183099150508581830991505084818684890908955050610c8435610964356109a43560006108e4356109243589818309915050888183089150506109043561094435898183099150508881830891505087818308880391508790508183089150508581830991505084818684890908955050610c64356109643560006108e43561092435888183099150508781830891505061090435610944358881830991505087818308880391508790508183089150508581830991505084818684890908955050610cc43561096435600161092435878183099150506109443587818309880391508790508183089150508581830991505084818684890908955050610ca435610964356109a43560016109243588818309915050610944358881830991505087818309880391508790508183089150508581830991505084818684890908955050610d043561096435600061092435878183089150506109443587818308880391508790508183089150508581830991505084818684890908955050610ce435610964356109a43560006109243588818308915050610944358881830891505087818308880391508790508183089150508581830991505084818684890908955050611580518485610f8435830986038208905084818684890908955050611044358485828703878485090861154051099050848186848909089550508384610fc4358603610fe43508611580510984818684890908955050838461102435860361104435086115805109848186848909089550506113c0516113a051610fa435610f84358788858a8b610e843588096108e4350808830991508788858a8b610ea4358809610904350808830991508788858a8b610ec435880961092435080883099150876114005184096000528788858a6000516108e4350808820990508786600051096000528788858a600051610904350808820990508786600051096000528788858a6000516109243508088209905087866000510960005287818903830893505050508485866115605161154051088309860382089050848186848909089550506113c0516113a05161100435610fe4358788858a8b610ee4358809610944350808830991508788858a8b610f04358809610964350808830991508788858a8b610f24358809610984350808830991508788858a600051610944350808820990508786600051096000528788858a600051610964350808820990508786600051096000528788858a6000516109843508088209905087866000510960005287818903830893505050508485866115605161154051088309860382089050848186848909089550506113c0516113a05161106435611044358788858a8b610f443588096109c4350808830991508788858a8b610f643588096115a0510808830991508788858a6000516109c4350808820990508786600051096000528788858a6000516115a051080882099050878189038308935050505084858661156051611540510883098603820890508481868489090895505061158051846110843582099050848186848909089550506115405184611084358209905084818684890908611380516113a05191975091506109e43580610a043588818187850908925050508682820890506000610d243560018981830991506108e4358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610964358b81850993505060008b8184099250508a8284089250809350505088818a87850908915050878382086000945091925082919050808880826110c435098a03850893508889611084358b036110a435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846110e435820990508481868489090895505061154051846110e4358209905084818684890908611380516113a05191975091506109e43580610a043588818187850908925050508682820890506000610d44356001898183099150610904358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610984358b81850993505060008b8184099250508a8284089250809350505088818a878509089150508783820860009450919250829190508088808261112435098a038508935088896110e4358b0361110435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846111443582099050848186848909089550506115405184611144358209905084818684890908611380516113a05191975091506109e43580610a243588818187850908925050508682820890506000610d643560018981830991506108e4358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610964358b81850993505060008b8184099250508a8284089250809350505088818a878509089150508783820860009450919250829190508088808261118435098a03850893508889611144358b0361116435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846111a435820990508481868489090895505061154051846111a4358209905084818684890908611380516113a05191975091506109e43580610a243588818187850908925050508682820890506000610d84356001898183099150610904358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610984358b81850993505060008b8184099250508a8284089250809350505088818a87850908915050878382086000945091925082919050808880826111e435098a038508935088896111a4358b036111c435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846112043582099050848186848909089550506115405184611204358209905084818684890908611380516113a05191975091506109e43580610a443588818187850908925050508682820890506000610da43560018981830991506108e4358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610964358b81850993505060008b8184099250508a8284089250809350505088818a878509089150508783820860009450919250829190508088808261124435098a03850893508889611204358b0361122435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846112643582099050848186848909089550506115405184611264358209905084818684890908611380516113a05191975091506109e43580610a443588818187850908925050508682820890506000610dc4356001898183099150610904358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610984358b81850993505060008b8184099250508a8284089250809350505088818a87850908915050878382086000945091925082919050808880826112a435098a03850893508889611264358b0361128435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846112c435820990508481868489090895505061154051846112c4358209905084818684890908611380516113a05191975091506109e43580610a643588818187850908925050508682820890506000610de43560018981830991506108e4358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610964358b81850993505060008b8184099250508a8284089250809350505088818a878509089150508783820860009450919250829190508088808261130435098a038508935088896112c4358b036112e435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846113243582099050848186848909089550506115405184611324358209905084818684890908611380516113a05191975091506109e43580610a643588818187850908925050508682820890506000610e04356001898183099150610904358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610984358b81850993505060008b8184099250508a8284089250809350505088818a878509089150508783820860009450919250829190508088808261136435098a03850893508889611324358b0361134435088a83860909945050505085868288038408878861154051611560510889036001080991505084818684890908955050611580518461138435820990508481868489090895505061154051846113843582099050848186848909086113a0519096509050610a84358582820890506000610e24356108e435888183099189039190506001898382089250507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff89818409925050888282089250889150849050820860009350905081818880826113c435098a03830891508889611384358b036113a435088a838709099450508788828a038608898a6115405161156051088b036001080993505050508481868489090895505061158051846113e435820990508481868489090895505061154051846113e43582099050848186848909086113a0519096509050610a84358582820890506000610e443561090435888183099189039190506001898382089250507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff898184099250508882820892508891508490508208600093509050818188808261142435098a038308915088896113e4358b0361140435088a838709099450508788828a038608898a6115405161156051088b03600108099350505050848186848909089550505050816115205184096115c0526108a4356000526108c4356020526115005192506108646107a45b8181101561244b5761242c85846101a2565b925061243e6020830135833585610182565b925060408203915061241a565b50506000516115e052602051611600526114005192506106205161064051838286099150816103605284610340528381860991508161032052838183099150838183099150838183099150838183099150838183099150508061030052506114605192506103806104006103005b818310156124d657848151860387088352602092830192016124b9565b50506103c0516104005250610380516103a051909350829084099250816103e05184099250826104205282600052610380519250816103e0518409610440526103a05161046081905261038051935082908409610480526103c0516001935082908409602052610320516103405190935060008382810386089050836103a05182099050806040528385850383089050836103c05182096060525050610300516103405161036051919450906000848381038708905084858387038808820990508461038051820990508060805284868603840890508485838703850882099050846103c051820990508060a05284868603830890508485848703840882099050846103e051820960c05250506103405161036051909450905060008382810386089050836103c051820990508060e0528385850383089050836103e0518209610100525061262c9050826101206000846100c4565b9050600051925082610420526104406104a05b80821015612659578385835109825260208201915061263f565b505060205192506114205160008384610e643587098208905083828209905083846115c051870982089050610f64610e645b818110156126ab578586833589098786860908925060208203915061268b565b5050610e446109a45b818110156126d457858683358909878686090892506020820391506126b4565b505083828209905083846114243587098208905083828209905083846113c43587098208905083828209905083846113643587098208905083828209905083846113043587098208905083828209905083846112a43587098208905083828209905083846112443587098208905083828209905083846111e43587098208905083828209905083846111843587098208905083828209905083846111243587098208905083828209905083846110c4358709820890508382820990508384610984358709820890506109446108c45b818110156127c357858683358909878686090892506020820391506127a3565b50506104a0525060405160009350829081906109a4359009840892508182610964356060510984089250816104405184099250826104c052611420519250600082836110243560805109820890508283610fe43560a051098208905082836110043560c05109820890508284820990508283610fc43560805109820890508283610f843560a05109820890508283610fa43560c0510982089050826104605182099050806104e05250611420519250600082836113e43560e051098208905082836114043561010051098208905082848209905082836113843560e051098208905082836113a43561010051098208905082848209905082836113243560e051098208905082836113443561010051098208905082848209905082836112c43560e051098208905082836112e43561010051098208905082848209905082836112643560e051098208905082836112843561010051098208905082848209905082836112043560e051098208905082836112243561010051098208905082848209905082836111a43560e051098208905082836111c43561010051098208905082848209905082836111443560e051098208905082836111643561010051098208905082848209905082836110e43560e051098208905082836111043561010051098208905082848209905082836110843560e051098208905082836110a43561010051098208905082848209905082836110443560e051098208905082836110643561010051098208905082610480518209610500525060205161052052604051606051909350829084086105405260805160a0519093508290840892508160c05184086105605260e0516101005190935082908408610580526000925060806105205b81851015612a60578051855260209485019401612a48565b5050612a708260806000846100c4565b90508161050051606051099250604060806104e05b81831015612aae578461144051870995508485825185510987089550601f199283019201612a85565b50505082611620526114405192506107a4356000526107c435602052612ad761142051826101a2565b9050612aea611600516115e05183610182565b90506113406108005b81811015612b2757612b0861142051846101a2565b9250612b1a6020830151835185610182565b9250604082039150612af3565b50506104246101645b81811015612b6457612b4561142051846101a2565b9250612b576020830135833585610182565b9250604082039150612b30565b505061012460245b81811015612ba057612b8161142051846101a2565b9250612b936020830135833585610182565b9250604082039150612b6c565b5050610164356080526101843560a052612bc082610440518509826101dc565b9050612bd160a05160805183610182565b90508161144051840992506104a4356080526104c43560a052612bf761142051826101dc565b9050612c0a6104843561046435836101bd565b9050612c1c82610460518509826101dc565b9050612c2d60a05160805183610182565b9050816114405184099250610764356080526107843560a0526107246104a45b81811015612c8157612c6261142051846101dc565b9250612c7460208301358335856101bd565b9250604082039150612c4d565b5050612c9382610480518509826101dc565b9050612ca460a05160805183610182565b9050610700516080526107205160a052612cc3611620518303826101dc565b9050612cd460a05160805183610182565b9050611444356080526114643560a052612cf3610400518303826101dc565b9050612d0460a05160805183610182565b9050611484356080526114a43560a052612d2161146051826101dc565b9050612d3260a05160805183610182565b9050600051611640526020516116605261148435611680526114a4356116a0526106805115612e0657611480516000526114a0516020526114c0516040526114e051606052611640516080526116605160a0526116805160c0526116a05160e05281610100600020069250612da783826101a2565b9050612dba611660516116405183610182565b905060005161164052602051611660526114c0516000526114e051602052612de283826101a2565b9050612df56116a0516116805183610182565b9050600051611680526020516116a0525b612e1f6116a051611680516116605161164051856101f7565b905080612e2b57600080fd5b505050600160005260206000f35b60008060008060408587031215612e4f57600080fd5b843567ffffffffffffffff80821115612e6757600080fd5b818701915087601f830112612e7b57600080fd5b813581811115612e8a57600080fd5b886020828501011115612e9c57600080fd5b602092830196509450908601359080821115612eb757600080fd5b818701915087601f830112612ecb57600080fd5b813581811115612eda57600080fd5b8860208260051b8501011115612eef57600080fd5b9598949750506020019450505056fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffe15fa2646970667358221220233197e92a8345f9168fa39941b58179427abaa5427d6ad2396165a8445a48f964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631e8e1e1314610030575b600080fd5b61004361003e366004612e39565b610057565b604051901515815260200160405180910390f35b6000610263565b60008060008435602086013588821086169450888110851694508860038a8b858609850908898283099289526020890191909152149290921696604094850196509390940193505050565b60016020536021600090812092830682529190915260200190565b6000838351602085015b602087038110156100f0578781518309808452602093840193909250016100ce565b8781518309915060208352602080840152602060408401528160608401526002880360808401528760a084015260208360c08560055afa851693508251915085602081016020850394505b828110156101635789855185098a84518609908452601f19958601959094509092019161013b565b8981518509945089825185099490915292909252509095945050505050565b81604052826060526000604060006080600060065afa9091169392505050565b816040526000604060006060600060075afa90911692915050565b8160c0528260e05260006040608080608060065afa9091169392505050565b8160c0526000604060806060608060075afa90911692915050565b81600052826020526107405160405261076051606052610780516080526107a05160a0528360c0528460e0526107c051610100526107e0516101205261080051610140526108205161016052600060206000610180600060085afa600051921690911695945050505050565b7f015ed1eb11aeda63673c5cd1d21e7576d6d9b610127552013d058798ad9942a96105a081905260036105c08190526000919091527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001906114c435811461146060443514166001169060206114e46115445b8082101561031a57813580845286119490941693602092830192909101906102f7565b506064925061138090506101e45b808410156103475761033c8784868861005e565b945094509450610328565b5060009182208581068252909152602090810161028083015b8084101561037f576103748784868861005e565b945094509450610360565b5060009182208581068252909152602090810161039c85826100a9565b905061038083015b808410156103c3576103b88784868861005e565b9450945094506103a4565b5060009182208581068252909152602090810161010083015b808410156103fb576103f08784868861005e565b9450945094506103dc565b50600091822085810682529091526020908101610b6083015b808410156104375783358084528611949094169360209384019390920191610414565b5060009182208581068252909152602090810161045485826100a9565b90506104628683858761005e565b60009081208881069094529290925293509150602090506104858582848661005e565b92509250925050507f015ed1eb11aeda63673c5cd1d21e7576d6d9b610127552013d058798ad9942a96105a05260036105c05260136105e0527f3064486657634403844b0eac78ca882cfd284341fcb0615a15cfcd17b14d8201610600527f0cf1526aaafac6bacbb67d11a4077806b123f767e4b0883d14cc0193568fc082610620527f20784546081c2aba227a9c15990bf6983ba2a2758faf563f38b437203ee230a9610640527f230385eb1034f58ed905d7dafbbf62da84661de658f682a719d8836889e048576106605260006106805260006106a05260006106c05260006106e0526001610700526002610720527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2610740527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed610760527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b610780527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6107a0527f186282957db913abd99f91db59fe69922e95040603ef44c0bd7aa3adeef8f5ac6107c0527f17944351223333f260ddc3b4af45191b856689eda9eab5cbcddbbe570ce860d26107e0527f06d971ff4a7467c3ec596ed6efc674572e32fd6f52b721f97e35b0b3d3546753610800527f06ecdb9f9567f59ed2eee36e1e1d58797fd13cc97fafc2910f5e8a12f202fa9a610820527f0216e1962b118a871641191e5b56ef67b7234be0ba1f6e65cc3149f4cdf7d2a4610840527f14dcba857f39b53d46db4acec4e59ee5a328d35713fd031114b75025d1ecb3cb610860527f187c9b94532ab54b1021c5f2a0961ed8cc7e6c1d6fba329813fdc75e12010253610880527f0b9e3099fb5fda92a6c4800600cdce14b40592756a6efc7ff6b7c4b016a2b5846108a0527f012490bac7f67b847cf6946033db4a632d4b8c0661c116fe4fc8bc2c5377e3106108c0527f0ce78f7694626a9f6ff31e7aae992e8ec8a9bd5fc1f25b18e3d5cf491e32022e6108e0527f0b0b730c7cc036b250580368804e6ed2056381162d89e0043b5bd98f4ee75f3a610900527f0ac8139daf06f5eea557c933528300d6f404d8695a11179c01e1faf1b8b3fc8e610920527f18bb78b97ae3439de5eb18cc8ff88b94632fd4d4a197ab1d6fbcf7cd4e208e71610940527f0f01ef2f892e9bed184b22e73245e666380819b1f89cdfe8d2a2725099bcc499610960527f07441a798ac3fd5588b3782c716810b647a50765a678f59494231a3317ef8b43610980527f2f8a11be120a83d9907b9090b91a2770d3507502a11b6f928cb1720227e07cb06109a0527f1082dd80327937416906c49ce703e84270f642e316ea7d79764b5d0ca0c176686109c0527f03882a90aef5c45d429a2a7c228f67e1ef92b4053ab40ed9ccca6fba107f5a496109e0527f0762a792c4e078b1a1601f19012b5aa2a802c88ad53ffcd0ddffc52a18441859610a00527f1b8aac3ff017c6c2688fbef6532e0ada2f70d21cb8b20cf918ad75fa40c39059610a20527f1083e2b5a2692c9dfc6bfc36b2c062ce3e9639291634299c2454f6870edc74d4610a40527f113f793e266061a8372644df1b58d827cc8a67a3e5ebbacca8188d0308b3794a610a60526000610a80526000610aa0527f2c3426f6ae01c251eb7b3ad51ac755b2248f56fa8d3eaf6a73e48b658e164514610ac0527f220ec25c20e22e59748822f57735d7dc10cc7bb9ff523a408d7be829a81df34a610ae0526000610b00526000610b20526000610b40526000610b60526000610b80526000610ba0527f0282ccf814185972925dc138ef87c90725017e68e61835dbf7e357bd019e111a610bc0527f12340e976d5284a05acd024637ee9b975e1ffd4fd2687737212667d9ef059090610be0527f0b43a13d09f0eb73dc967846a8013d832fcb609a5fb5bfaaa59476e13003d45b610c00527f2cebd1042aae886ebdb5a1abbb8d07301d9c903d2c46ab07a4780b735dc9a822610c20526000610c40526000610c60527f1374c4c06b1219a9760699a85492f97a0f17ed49ddcfce2248adc9df8cb0926a610c80527f2fce9e1ba999b7449ed4933ed8e2ad23d89e8e9cdde42b6e038e19d02dce3374610ca0526000610cc0526000610ce0526000610d00526000610d20526000610d40526000610d60527f0b5344c0f186b30f1a74579b8a4e31609a59f38cdacaedc651d3c71473d052b6610d80527f0b6d56d0bb6b2b32ea2dab46a3dadd9f8d8a0234edcbf7ac3cd2d532367792af610da0527f0c0f1a2980e4e061ec39b173145e45ff63dac660b1f5cf6ed7980bd61d03d83c610dc0527f2546f6b73d270a25fdac502ff2b4c7d41a6024c5ffe335f3364f4b6f16e6976d610de0526000610e00526000610e20526000610e40526000610e60526000610e80526000610ea0526000610ec0526000610ee0527f049df352acb3a45a7fe15558a157038d557365ff21a562a4d29b99e237818fdb610f00527f1e6ea4545cac489d51144bf36c369196454c8b5d5c483b90017ea64fcfe4963b610f20527f051699300252f4edbb6b52c8061d009f5b885dc0903500bbcfa7827a202a9d1f610f40527f18defa4a959b19b73fbcac2bbd4e9356c94314b19d58ea7c53bed9c25b195d9c610f60527f1a3f2401b386d536dc0a1ff30045d501b609cb23602eedfceef2d4264d602420610f80527f1ca4d5bc2f08eb628b63bae40ea0b40e82102dfc7bad0a4b0aa92d783d22ead2610fa0527f1a3f2401b386d536dc0a1ff30045d501b609cb23602eedfceef2d4264d602420610fc0527f1ca4d5bc2f08eb628b63bae40ea0b40e82102dfc7bad0a4b0aa92d783d22ead2610fe0527f2be8e51f2c72ca2832826b7452c64cf95f1be50f91e93086e0fcf75bf15fad62611000527f16cb505ae9236137ce904d411d583fce2aecc38e72b10398ef4af76cd7dde018611020527f2be8e51f2c72ca2832826b7452c64cf95f1be50f91e93086e0fcf75bf15fad62611040527f16cb505ae9236137ce904d411d583fce2aecc38e72b10398ef4af76cd7dde018611060527f09b8d32874c3fff46fc88d2e9b56513136b556285d9a116cf88ad95081afa015611080527f2ab67ed9a452a52afe519a10499f82cd0980f8fa7cd85dafe76d318bd3163beb6110a0527f09b8d32874c3fff46fc88d2e9b56513136b556285d9a116cf88ad95081afa0156110c0527f2ab67ed9a452a52afe519a10499f82cd0980f8fa7cd85dafe76d318bd3163beb6110e0527f2f0e4409049908c1091a4d3c59a0c816742a61b2c770d1a8caefbf68a4c68e73611100527f0fa4d0dfe99adba964723b4542bb0c4447a255f82d59f7d96168eaa341e0f149611120527f0e7fa261d2f88ea8d8e2666412fa3d3d1faa845793ddb40862e57d1c57fd0aca611140527f22c47c0930845a759ae2cf0397ae00991e40cf516144e0746fb4a5bd48de60d1611160527f044c90ab86815dccc1e3a903952d216cb666880388aeb065b0a530a840ef6fcd611180527f20423a700b0e986380db464d0f9d07a6cd027421064ba401075195b75acb56b76111a0527f296920245ccf20b76d4e25dcae40905b9f1e66c24813b7d0a95f7961fc51b9556111c0527f187c8c0640f7561170b45f89c46e5a6397e97d870323f38b4a4634135beaa3256111e0527f0c61dc15fb70d5a92088f46af977ae587649fa3ecfc442ebcaccf39c9ac728d5611200527f1a03d4641078a2d9d6f7d49430a2e37ea0796dd77fa625339ce2e85d1591de9b611220527f1e6f62336341d1b5b4b957d94793d6b4a7576925fc3a5282a485a4d3bc4fbcb3611240527f091251bea1003098fde04622b373d87834f1d06f8124a1b81ade3cf94a558cb5611260527f19246d84c2260d828f72e1fe7c289dfbe730959849f949d137e5ca40a3b76775611280527f0136424cd2d9e208f63588e0f0e89b3818bbadb6496724321a1965df43c47b286112a0527f304ea1ae8077064dd78a50e5a6e79081418ba22e75cc4d5dcd075e410375c45f6112c0527f14928efe1a73b5d3dc478d2dcf9d51ec52a8b9e52b040846a1d7fd4ec9cedf1e6112e0527f197d80284883061a16dfc9d037cc7e36f55ececbc520f89bc2f79970a81807fb611300527f0e2d5a3c74fcbf61e931c1c74e9b9f9ca916ced24ee34b65e7aac950933cd589611320527f1bb547de66663d2dc23e8269651c33fff970b1ee0ea36ec63824dce7b67f3ef9611340527f1b83c4ec52644683c8dc1810f8a3d83fb6b778226e127474b48334946446245561136052610680511561117d576106c0516106e05160206106a051026114e4016020830260028102600382028335838501358386013583870135896020028801895b818a10156111345760208a0199508935811b86019550888a0135811b85019450878a0135811b84019350868a0135811b830192508a810190506110f6565b50508c60038e8f8788098709088d848509148b169a508c60038e8f8586098509088d828309148b169a508361148052826114a052816114c052806114e052505050505050505050505b8061118757600080fd5b6105e0519250611400518060005b858110156111ab57848283099150600101611195565b5061062051945061150060066105c0510160200281016105c0516111cd576020015b610660515b818310156111f35786818803860883528688820990506020830192506111d2565b508560018703840893508381526112118660208301611500886100c4565b94506115009150856106005185099350610660515b818310156112495786878285510986098352868882099050602083019250611226565b5061152051965061154093506115c091505b81841015611275578584518808965060208401935061125b565b600091506114e46105c05160200281015b808210156112aa578788833588510985089350602082019150602086019550611286565b50505161150080516115c0519490915261152091909152611540526115609590955261158052506115a0929092526113e051600092907f09226b6e22c6f0ca64ec26aad4c86e715b5f898e5e963f25870e56bbe533e9a290610b4435610964356109243586038681830891505085818309965050610c2435905061098435610944358603868183089150508581830991505084818684890908955050610aa435610964356108e4356109243587818308880391508790508183089150508581830991505084818684890908955050610b843561098435610904356109443587818308880391508790508183089150508581830991505084818684890908955050610b0435610964356108e4356109243587818309880391508790508183089150508581830991505084818684890908955050610be43561098435610904356109443587818309880391508790508183089150508581830991505084818684890908955050610ac435610964356108e43561092435870387818308880391508790508183089150508581830991505084818684890908955050610ba435610984356109043561094435870387818308880391508790508183089150508581830991505084818684890908955050610ae435610964356109243586038603868183089150508581830991505084818684890908955050610bc435610984356109443586038603868183089150508581830991505084818684890908955050610b2435610964358581830991505084818684890908955050610c0435610984358581830991505084818684890908955050610b6435610964356000198601868183089050868183099150508581830991505084818684890908955050610c4435610984356000198601868183089050868183099150508581830991505084818684890908955050610c8435610964356109a43560006108e4356109243589818309915050888183089150506109043561094435898183099150508881830891505087818308880391508790508183089150508581830991505084818684890908955050610c64356109643560006108e43561092435888183099150508781830891505061090435610944358881830991505087818308880391508790508183089150508581830991505084818684890908955050610cc43561096435600161092435878183099150506109443587818309880391508790508183089150508581830991505084818684890908955050610ca435610964356109a43560016109243588818309915050610944358881830991505087818309880391508790508183089150508581830991505084818684890908955050610d043561096435600061092435878183089150506109443587818308880391508790508183089150508581830991505084818684890908955050610ce435610964356109a43560006109243588818308915050610944358881830891505087818308880391508790508183089150508581830991505084818684890908955050611580518485610f8435830986038208905084818684890908955050611044358485828703878485090861154051099050848186848909089550508384610fc4358603610fe43508611580510984818684890908955050838461102435860361104435086115805109848186848909089550506113c0516113a051610fa435610f84358788858a8b610e843588096108e4350808830991508788858a8b610ea4358809610904350808830991508788858a8b610ec435880961092435080883099150876114005184096000528788858a6000516108e4350808820990508786600051096000528788858a600051610904350808820990508786600051096000528788858a6000516109243508088209905087866000510960005287818903830893505050508485866115605161154051088309860382089050848186848909089550506113c0516113a05161100435610fe4358788858a8b610ee4358809610944350808830991508788858a8b610f04358809610964350808830991508788858a8b610f24358809610984350808830991508788858a600051610944350808820990508786600051096000528788858a600051610964350808820990508786600051096000528788858a6000516109843508088209905087866000510960005287818903830893505050508485866115605161154051088309860382089050848186848909089550506113c0516113a05161106435611044358788858a8b610f443588096109c4350808830991508788858a8b610f643588096115a0510808830991508788858a6000516109c4350808820990508786600051096000528788858a6000516115a051080882099050878189038308935050505084858661156051611540510883098603820890508481868489090895505061158051846110843582099050848186848909089550506115405184611084358209905084818684890908611380516113a05191975091506109e43580610a043588818187850908925050508682820890506000610d243560018981830991506108e4358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610964358b81850993505060008b8184099250508a8284089250809350505088818a87850908915050878382086000945091925082919050808880826110c435098a03850893508889611084358b036110a435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846110e435820990508481868489090895505061154051846110e4358209905084818684890908611380516113a05191975091506109e43580610a043588818187850908925050508682820890506000610d44356001898183099150610904358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610984358b81850993505060008b8184099250508a8284089250809350505088818a878509089150508783820860009450919250829190508088808261112435098a038508935088896110e4358b0361110435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846111443582099050848186848909089550506115405184611144358209905084818684890908611380516113a05191975091506109e43580610a243588818187850908925050508682820890506000610d643560018981830991506108e4358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610964358b81850993505060008b8184099250508a8284089250809350505088818a878509089150508783820860009450919250829190508088808261118435098a03850893508889611144358b0361116435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846111a435820990508481868489090895505061154051846111a4358209905084818684890908611380516113a05191975091506109e43580610a243588818187850908925050508682820890506000610d84356001898183099150610904358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610984358b81850993505060008b8184099250508a8284089250809350505088818a87850908915050878382086000945091925082919050808880826111e435098a038508935088896111a4358b036111c435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846112043582099050848186848909089550506115405184611204358209905084818684890908611380516113a05191975091506109e43580610a443588818187850908925050508682820890506000610da43560018981830991506108e4358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610964358b81850993505060008b8184099250508a8284089250809350505088818a878509089150508783820860009450919250829190508088808261124435098a03850893508889611204358b0361122435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846112643582099050848186848909089550506115405184611264358209905084818684890908611380516113a05191975091506109e43580610a443588818187850908925050508682820890506000610dc4356001898183099150610904358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610984358b81850993505060008b8184099250508a8284089250809350505088818a87850908915050878382086000945091925082919050808880826112a435098a03850893508889611264358b0361128435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846112c435820990508481868489090895505061154051846112c4358209905084818684890908611380516113a05191975091506109e43580610a643588818187850908925050508682820890506000610de43560018981830991506108e4358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610964358b81850993505060008b8184099250508a8284089250809350505088818a878509089150508783820860009450919250829190508088808261130435098a038508935088896112c4358b036112e435088a8386090994505050508586828803840887886115405161156051088903600108099150508481868489090895505061158051846113243582099050848186848909089550506115405184611324358209905084818684890908611380516113a05191975091506109e43580610a643588818187850908925050508682820890506000610e04356001898183099150610904358a8184099050828b038b818408925050600080516020612eff8339815191528b81840990508b818308915050610984358b81850993505060008b8184099250508a8284089250809350505088818a878509089150508783820860009450919250829190508088808261136435098a03850893508889611324358b0361134435088a83860909945050505085868288038408878861154051611560510889036001080991505084818684890908955050611580518461138435820990508481868489090895505061154051846113843582099050848186848909086113a0519096509050610a84358582820890506000610e24356108e435888183099189039190506001898382089250507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff89818409925050888282089250889150849050820860009350905081818880826113c435098a03830891508889611384358b036113a435088a838709099450508788828a038608898a6115405161156051088b036001080993505050508481868489090895505061158051846113e435820990508481868489090895505061154051846113e43582099050848186848909086113a0519096509050610a84358582820890506000610e443561090435888183099189039190506001898382089250507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff898184099250508882820892508891508490508208600093509050818188808261142435098a038308915088896113e4358b0361140435088a838709099450508788828a038608898a6115405161156051088b03600108099350505050848186848909089550505050816115205184096115c0526108a4356000526108c4356020526115005192506108646107a45b8181101561244b5761242c85846101a2565b925061243e6020830135833585610182565b925060408203915061241a565b50506000516115e052602051611600526114005192506106205161064051838286099150816103605284610340528381860991508161032052838183099150838183099150838183099150838183099150838183099150508061030052506114605192506103806104006103005b818310156124d657848151860387088352602092830192016124b9565b50506103c0516104005250610380516103a051909350829084099250816103e05184099250826104205282600052610380519250816103e0518409610440526103a05161046081905261038051935082908409610480526103c0516001935082908409602052610320516103405190935060008382810386089050836103a05182099050806040528385850383089050836103c05182096060525050610300516103405161036051919450906000848381038708905084858387038808820990508461038051820990508060805284868603840890508485838703850882099050846103c051820990508060a05284868603830890508485848703840882099050846103e051820960c05250506103405161036051909450905060008382810386089050836103c051820990508060e0528385850383089050836103e0518209610100525061262c9050826101206000846100c4565b9050600051925082610420526104406104a05b80821015612659578385835109825260208201915061263f565b505060205192506114205160008384610e643587098208905083828209905083846115c051870982089050610f64610e645b818110156126ab578586833589098786860908925060208203915061268b565b5050610e446109a45b818110156126d457858683358909878686090892506020820391506126b4565b505083828209905083846114243587098208905083828209905083846113c43587098208905083828209905083846113643587098208905083828209905083846113043587098208905083828209905083846112a43587098208905083828209905083846112443587098208905083828209905083846111e43587098208905083828209905083846111843587098208905083828209905083846111243587098208905083828209905083846110c4358709820890508382820990508384610984358709820890506109446108c45b818110156127c357858683358909878686090892506020820391506127a3565b50506104a0525060405160009350829081906109a4359009840892508182610964356060510984089250816104405184099250826104c052611420519250600082836110243560805109820890508283610fe43560a051098208905082836110043560c05109820890508284820990508283610fc43560805109820890508283610f843560a05109820890508283610fa43560c0510982089050826104605182099050806104e05250611420519250600082836113e43560e051098208905082836114043561010051098208905082848209905082836113843560e051098208905082836113a43561010051098208905082848209905082836113243560e051098208905082836113443561010051098208905082848209905082836112c43560e051098208905082836112e43561010051098208905082848209905082836112643560e051098208905082836112843561010051098208905082848209905082836112043560e051098208905082836112243561010051098208905082848209905082836111a43560e051098208905082836111c43561010051098208905082848209905082836111443560e051098208905082836111643561010051098208905082848209905082836110e43560e051098208905082836111043561010051098208905082848209905082836110843560e051098208905082836110a43561010051098208905082848209905082836110443560e051098208905082836110643561010051098208905082610480518209610500525060205161052052604051606051909350829084086105405260805160a0519093508290840892508160c05184086105605260e0516101005190935082908408610580526000925060806105205b81851015612a60578051855260209485019401612a48565b5050612a708260806000846100c4565b90508161050051606051099250604060806104e05b81831015612aae578461144051870995508485825185510987089550601f199283019201612a85565b50505082611620526114405192506107a4356000526107c435602052612ad761142051826101a2565b9050612aea611600516115e05183610182565b90506113406108005b81811015612b2757612b0861142051846101a2565b9250612b1a6020830151835185610182565b9250604082039150612af3565b50506104246101645b81811015612b6457612b4561142051846101a2565b9250612b576020830135833585610182565b9250604082039150612b30565b505061012460245b81811015612ba057612b8161142051846101a2565b9250612b936020830135833585610182565b9250604082039150612b6c565b5050610164356080526101843560a052612bc082610440518509826101dc565b9050612bd160a05160805183610182565b90508161144051840992506104a4356080526104c43560a052612bf761142051826101dc565b9050612c0a6104843561046435836101bd565b9050612c1c82610460518509826101dc565b9050612c2d60a05160805183610182565b9050816114405184099250610764356080526107843560a0526107246104a45b81811015612c8157612c6261142051846101dc565b9250612c7460208301358335856101bd565b9250604082039150612c4d565b5050612c9382610480518509826101dc565b9050612ca460a05160805183610182565b9050610700516080526107205160a052612cc3611620518303826101dc565b9050612cd460a05160805183610182565b9050611444356080526114643560a052612cf3610400518303826101dc565b9050612d0460a05160805183610182565b9050611484356080526114a43560a052612d2161146051826101dc565b9050612d3260a05160805183610182565b9050600051611640526020516116605261148435611680526114a4356116a0526106805115612e0657611480516000526114a0516020526114c0516040526114e051606052611640516080526116605160a0526116805160c0526116a05160e05281610100600020069250612da783826101a2565b9050612dba611660516116405183610182565b905060005161164052602051611660526114c0516000526114e051602052612de283826101a2565b9050612df56116a0516116805183610182565b9050600051611680526020516116a0525b612e1f6116a051611680516116605161164051856101f7565b905080612e2b57600080fd5b505050600160005260206000f35b60008060008060408587031215612e4f57600080fd5b843567ffffffffffffffff80821115612e6757600080fd5b818701915087601f830112612e7b57600080fd5b813581811115612e8a57600080fd5b886020828501011115612e9c57600080fd5b602092830196509450908601359080821115612eb757600080fd5b818701915087601f830112612ecb57600080fd5b813581811115612eda57600080fd5b8860208260051b8501011115612eef57600080fd5b9598949750506020019450505056fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffe15fa2646970667358221220233197e92a8345f9168fa39941b58179427abaa5427d6ad2396165a8445a48f964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}